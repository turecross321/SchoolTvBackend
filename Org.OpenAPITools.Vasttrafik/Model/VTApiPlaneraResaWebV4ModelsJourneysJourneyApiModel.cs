/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about a journey.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.Journeys.JourneyApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel" /> class.
        /// </summary>
        /// <param name="reconstructionReference">A reference that can be used to reconstruct this journey at a later time..</param>
        /// <param name="detailsReference">A reference that should be used when getting detailed information about the journey..</param>
        /// <param name="departureAccessLink">departureAccessLink.</param>
        /// <param name="tripLegs">A list of trip legs on a journey, when applicable. A journey has either one or more trip legs or one  destination link..</param>
        /// <param name="connectionLinks">A list of ConnectionLinks between TripLegs, when applicable. The internal order of TripLegs and ConnectionLinks is defined by Index-property on the objects..</param>
        /// <param name="arrivalAccessLink">arrivalAccessLink.</param>
        /// <param name="destinationLink">destinationLink.</param>
        /// <param name="isDeparted">Flag indicating if the first trip leg of the journey is departed..</param>
        /// <param name="occupancy">occupancy.</param>
        public VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel(string reconstructionReference = default(string), string detailsReference = default(string), VTApiPlaneraResaWebV4ModelsJourneysDepartureAccessLinkApiModel departureAccessLink = default(VTApiPlaneraResaWebV4ModelsJourneysDepartureAccessLinkApiModel), List<VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel> tripLegs = default(List<VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel>), List<VTApiPlaneraResaWebV4ModelsJourneysConnectionLinkApiModel> connectionLinks = default(List<VTApiPlaneraResaWebV4ModelsJourneysConnectionLinkApiModel>), VTApiPlaneraResaWebV4ModelsJourneysArrivalAccessLinkApiModel arrivalAccessLink = default(VTApiPlaneraResaWebV4ModelsJourneysArrivalAccessLinkApiModel), VTApiPlaneraResaWebV4ModelsJourneysDestinationLinkApiModel destinationLink = default(VTApiPlaneraResaWebV4ModelsJourneysDestinationLinkApiModel), bool? isDeparted = default(bool?), VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel occupancy = default(VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel))
        {
            this.ReconstructionReference = reconstructionReference;
            this.DetailsReference = detailsReference;
            this.DepartureAccessLink = departureAccessLink;
            this.TripLegs = tripLegs;
            this.ConnectionLinks = connectionLinks;
            this.ArrivalAccessLink = arrivalAccessLink;
            this.DestinationLink = destinationLink;
            this.IsDeparted = isDeparted;
            this.Occupancy = occupancy;
        }

        /// <summary>
        /// A reference that can be used to reconstruct this journey at a later time.
        /// </summary>
        /// <value>A reference that can be used to reconstruct this journey at a later time.</value>
        [DataMember(Name = "reconstructionReference", EmitDefaultValue = true)]
        public string ReconstructionReference { get; set; }

        /// <summary>
        /// A reference that should be used when getting detailed information about the journey.
        /// </summary>
        /// <value>A reference that should be used when getting detailed information about the journey.</value>
        [DataMember(Name = "detailsReference", EmitDefaultValue = true)]
        public string DetailsReference { get; set; }

        /// <summary>
        /// Gets or Sets DepartureAccessLink
        /// </summary>
        [DataMember(Name = "departureAccessLink", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsJourneysDepartureAccessLinkApiModel DepartureAccessLink { get; set; }

        /// <summary>
        /// A list of trip legs on a journey, when applicable. A journey has either one or more trip legs or one  destination link.
        /// </summary>
        /// <value>A list of trip legs on a journey, when applicable. A journey has either one or more trip legs or one  destination link.</value>
        [DataMember(Name = "tripLegs", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel> TripLegs { get; set; }

        /// <summary>
        /// A list of ConnectionLinks between TripLegs, when applicable. The internal order of TripLegs and ConnectionLinks is defined by Index-property on the objects.
        /// </summary>
        /// <value>A list of ConnectionLinks between TripLegs, when applicable. The internal order of TripLegs and ConnectionLinks is defined by Index-property on the objects.</value>
        [DataMember(Name = "connectionLinks", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsJourneysConnectionLinkApiModel> ConnectionLinks { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalAccessLink
        /// </summary>
        [DataMember(Name = "arrivalAccessLink", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsJourneysArrivalAccessLinkApiModel ArrivalAccessLink { get; set; }

        /// <summary>
        /// Gets or Sets DestinationLink
        /// </summary>
        [DataMember(Name = "destinationLink", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsJourneysDestinationLinkApiModel DestinationLink { get; set; }

        /// <summary>
        /// Flag indicating if the first trip leg of the journey is departed.
        /// </summary>
        /// <value>Flag indicating if the first trip leg of the journey is departed.</value>
        [DataMember(Name = "isDeparted", EmitDefaultValue = true)]
        public bool? IsDeparted { get; set; }

        /// <summary>
        /// Gets or Sets Occupancy
        /// </summary>
        [DataMember(Name = "occupancy", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel Occupancy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel {\n");
            sb.Append("  ReconstructionReference: ").Append(ReconstructionReference).Append("\n");
            sb.Append("  DetailsReference: ").Append(DetailsReference).Append("\n");
            sb.Append("  DepartureAccessLink: ").Append(DepartureAccessLink).Append("\n");
            sb.Append("  TripLegs: ").Append(TripLegs).Append("\n");
            sb.Append("  ConnectionLinks: ").Append(ConnectionLinks).Append("\n");
            sb.Append("  ArrivalAccessLink: ").Append(ArrivalAccessLink).Append("\n");
            sb.Append("  DestinationLink: ").Append(DestinationLink).Append("\n");
            sb.Append("  IsDeparted: ").Append(IsDeparted).Append("\n");
            sb.Append("  Occupancy: ").Append(Occupancy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReconstructionReference == input.ReconstructionReference ||
                    (this.ReconstructionReference != null &&
                    this.ReconstructionReference.Equals(input.ReconstructionReference))
                ) && 
                (
                    this.DetailsReference == input.DetailsReference ||
                    (this.DetailsReference != null &&
                    this.DetailsReference.Equals(input.DetailsReference))
                ) && 
                (
                    this.DepartureAccessLink == input.DepartureAccessLink ||
                    (this.DepartureAccessLink != null &&
                    this.DepartureAccessLink.Equals(input.DepartureAccessLink))
                ) && 
                (
                    this.TripLegs == input.TripLegs ||
                    this.TripLegs != null &&
                    input.TripLegs != null &&
                    this.TripLegs.SequenceEqual(input.TripLegs)
                ) && 
                (
                    this.ConnectionLinks == input.ConnectionLinks ||
                    this.ConnectionLinks != null &&
                    input.ConnectionLinks != null &&
                    this.ConnectionLinks.SequenceEqual(input.ConnectionLinks)
                ) && 
                (
                    this.ArrivalAccessLink == input.ArrivalAccessLink ||
                    (this.ArrivalAccessLink != null &&
                    this.ArrivalAccessLink.Equals(input.ArrivalAccessLink))
                ) && 
                (
                    this.DestinationLink == input.DestinationLink ||
                    (this.DestinationLink != null &&
                    this.DestinationLink.Equals(input.DestinationLink))
                ) && 
                (
                    this.IsDeparted == input.IsDeparted ||
                    (this.IsDeparted != null &&
                    this.IsDeparted.Equals(input.IsDeparted))
                ) && 
                (
                    this.Occupancy == input.Occupancy ||
                    (this.Occupancy != null &&
                    this.Occupancy.Equals(input.Occupancy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReconstructionReference != null)
                {
                    hashCode = (hashCode * 59) + this.ReconstructionReference.GetHashCode();
                }
                if (this.DetailsReference != null)
                {
                    hashCode = (hashCode * 59) + this.DetailsReference.GetHashCode();
                }
                if (this.DepartureAccessLink != null)
                {
                    hashCode = (hashCode * 59) + this.DepartureAccessLink.GetHashCode();
                }
                if (this.TripLegs != null)
                {
                    hashCode = (hashCode * 59) + this.TripLegs.GetHashCode();
                }
                if (this.ConnectionLinks != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionLinks.GetHashCode();
                }
                if (this.ArrivalAccessLink != null)
                {
                    hashCode = (hashCode * 59) + this.ArrivalAccessLink.GetHashCode();
                }
                if (this.DestinationLink != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationLink.GetHashCode();
                }
                if (this.IsDeparted != null)
                {
                    hashCode = (hashCode * 59) + this.IsDeparted.GetHashCode();
                }
                if (this.Occupancy != null)
                {
                    hashCode = (hashCode * 59) + this.Occupancy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
