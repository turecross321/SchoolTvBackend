/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains detailed information about a direction and its components.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.DirectionDetailsApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel" /> class.
        /// </summary>
        /// <param name="fullDirection">The original direction string..</param>
        /// <param name="shortDirection">The direction string after parsing and removing the different components..</param>
        /// <param name="replaces">The name of the replaced line, if any. Parses and replaces the following component: \&quot;, Ersätter [replaces]\&quot;.</param>
        /// <param name="via">The name of the via location, if any. Parses and replaces the following component: \&quot;, via [via]\&quot;.</param>
        /// <param name="isFreeService">Whether the service is free. Parses and replaces the following component: \&quot;, Fri resa\&quot;.</param>
        /// <param name="isPaidService">Whether the service is paid. Parses and replaces the following component: \&quot;, Avgiftsbelagd tur\&quot;.</param>
        /// <param name="isSwimmingService">Whether the service is a swimming service. Parses and replaces the following component: \&quot;, Badbuss\&quot;.</param>
        /// <param name="isDirectDestinationBus">Whether the service is a direct destination bus. Parses and replaces the following component: \&quot;, Direktbuss\&quot;.</param>
        /// <param name="isFrontEntry">Whether the service has front entry. Parses and replaces the following component: \&quot;, Påstigning fram\&quot;.</param>
        /// <param name="isExtraBus">Whether the service is an extra bus. Parses and replaces the following component: \&quot;, Extrabuss\&quot;.</param>
        /// <param name="isExtraBoat">Whether the service is an extra boat. Parses and replaces the following component: \&quot;, Extrabåt\&quot;.</param>
        /// <param name="isExtraTram">Whether the service is an extra tram. Parses and replaces the following component: \&quot;, Extravagn\&quot;.</param>
        /// <param name="isSchoolBus">Whether the service is a school bus. Parses and replaces the following component: \&quot;, Skolbuss\&quot;.</param>
        /// <param name="isExpressBus">Whether the service is an express bus. Parses and replaces the following component: \&quot;, Snabbuss\&quot;.</param>
        /// <param name="fortifiesLine">The name of the fortified line, if any. Parses and replaces the following component: \&quot;, Fortifies [fortifies]\&quot;.</param>
        public VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel(string fullDirection = default(string), string shortDirection = default(string), string replaces = default(string), string via = default(string), bool? isFreeService = default(bool?), bool? isPaidService = default(bool?), bool? isSwimmingService = default(bool?), bool? isDirectDestinationBus = default(bool?), bool? isFrontEntry = default(bool?), bool? isExtraBus = default(bool?), bool? isExtraBoat = default(bool?), bool? isExtraTram = default(bool?), bool? isSchoolBus = default(bool?), bool? isExpressBus = default(bool?), string fortifiesLine = default(string))
        {
            this.FullDirection = fullDirection;
            this.ShortDirection = shortDirection;
            this.Replaces = replaces;
            this.Via = via;
            this.IsFreeService = isFreeService;
            this.IsPaidService = isPaidService;
            this.IsSwimmingService = isSwimmingService;
            this.IsDirectDestinationBus = isDirectDestinationBus;
            this.IsFrontEntry = isFrontEntry;
            this.IsExtraBus = isExtraBus;
            this.IsExtraBoat = isExtraBoat;
            this.IsExtraTram = isExtraTram;
            this.IsSchoolBus = isSchoolBus;
            this.IsExpressBus = isExpressBus;
            this.FortifiesLine = fortifiesLine;
        }

        /// <summary>
        /// The original direction string.
        /// </summary>
        /// <value>The original direction string.</value>
        [DataMember(Name = "fullDirection", EmitDefaultValue = true)]
        public string FullDirection { get; set; }

        /// <summary>
        /// The direction string after parsing and removing the different components.
        /// </summary>
        /// <value>The direction string after parsing and removing the different components.</value>
        [DataMember(Name = "shortDirection", EmitDefaultValue = true)]
        public string ShortDirection { get; set; }

        /// <summary>
        /// The name of the replaced line, if any. Parses and replaces the following component: \&quot;, Ersätter [replaces]\&quot;
        /// </summary>
        /// <value>The name of the replaced line, if any. Parses and replaces the following component: \&quot;, Ersätter [replaces]\&quot;</value>
        [DataMember(Name = "replaces", EmitDefaultValue = true)]
        public string Replaces { get; set; }

        /// <summary>
        /// The name of the via location, if any. Parses and replaces the following component: \&quot;, via [via]\&quot;
        /// </summary>
        /// <value>The name of the via location, if any. Parses and replaces the following component: \&quot;, via [via]\&quot;</value>
        [DataMember(Name = "via", EmitDefaultValue = true)]
        public string Via { get; set; }

        /// <summary>
        /// Whether the service is free. Parses and replaces the following component: \&quot;, Fri resa\&quot;
        /// </summary>
        /// <value>Whether the service is free. Parses and replaces the following component: \&quot;, Fri resa\&quot;</value>
        [DataMember(Name = "isFreeService", EmitDefaultValue = true)]
        public bool? IsFreeService { get; set; }

        /// <summary>
        /// Whether the service is paid. Parses and replaces the following component: \&quot;, Avgiftsbelagd tur\&quot;
        /// </summary>
        /// <value>Whether the service is paid. Parses and replaces the following component: \&quot;, Avgiftsbelagd tur\&quot;</value>
        [DataMember(Name = "isPaidService", EmitDefaultValue = true)]
        public bool? IsPaidService { get; set; }

        /// <summary>
        /// Whether the service is a swimming service. Parses and replaces the following component: \&quot;, Badbuss\&quot;
        /// </summary>
        /// <value>Whether the service is a swimming service. Parses and replaces the following component: \&quot;, Badbuss\&quot;</value>
        [DataMember(Name = "isSwimmingService", EmitDefaultValue = true)]
        public bool? IsSwimmingService { get; set; }

        /// <summary>
        /// Whether the service is a direct destination bus. Parses and replaces the following component: \&quot;, Direktbuss\&quot;
        /// </summary>
        /// <value>Whether the service is a direct destination bus. Parses and replaces the following component: \&quot;, Direktbuss\&quot;</value>
        [DataMember(Name = "isDirectDestinationBus", EmitDefaultValue = true)]
        public bool? IsDirectDestinationBus { get; set; }

        /// <summary>
        /// Whether the service has front entry. Parses and replaces the following component: \&quot;, Påstigning fram\&quot;
        /// </summary>
        /// <value>Whether the service has front entry. Parses and replaces the following component: \&quot;, Påstigning fram\&quot;</value>
        [DataMember(Name = "isFrontEntry", EmitDefaultValue = true)]
        public bool? IsFrontEntry { get; set; }

        /// <summary>
        /// Whether the service is an extra bus. Parses and replaces the following component: \&quot;, Extrabuss\&quot;
        /// </summary>
        /// <value>Whether the service is an extra bus. Parses and replaces the following component: \&quot;, Extrabuss\&quot;</value>
        [DataMember(Name = "isExtraBus", EmitDefaultValue = true)]
        public bool? IsExtraBus { get; set; }

        /// <summary>
        /// Whether the service is an extra boat. Parses and replaces the following component: \&quot;, Extrabåt\&quot;
        /// </summary>
        /// <value>Whether the service is an extra boat. Parses and replaces the following component: \&quot;, Extrabåt\&quot;</value>
        [DataMember(Name = "isExtraBoat", EmitDefaultValue = true)]
        public bool? IsExtraBoat { get; set; }

        /// <summary>
        /// Whether the service is an extra tram. Parses and replaces the following component: \&quot;, Extravagn\&quot;
        /// </summary>
        /// <value>Whether the service is an extra tram. Parses and replaces the following component: \&quot;, Extravagn\&quot;</value>
        [DataMember(Name = "isExtraTram", EmitDefaultValue = true)]
        public bool? IsExtraTram { get; set; }

        /// <summary>
        /// Whether the service is a school bus. Parses and replaces the following component: \&quot;, Skolbuss\&quot;
        /// </summary>
        /// <value>Whether the service is a school bus. Parses and replaces the following component: \&quot;, Skolbuss\&quot;</value>
        [DataMember(Name = "isSchoolBus", EmitDefaultValue = true)]
        public bool? IsSchoolBus { get; set; }

        /// <summary>
        /// Whether the service is an express bus. Parses and replaces the following component: \&quot;, Snabbuss\&quot;
        /// </summary>
        /// <value>Whether the service is an express bus. Parses and replaces the following component: \&quot;, Snabbuss\&quot;</value>
        [DataMember(Name = "isExpressBus", EmitDefaultValue = true)]
        public bool? IsExpressBus { get; set; }

        /// <summary>
        /// The name of the fortified line, if any. Parses and replaces the following component: \&quot;, Fortifies [fortifies]\&quot;
        /// </summary>
        /// <value>The name of the fortified line, if any. Parses and replaces the following component: \&quot;, Fortifies [fortifies]\&quot;</value>
        [DataMember(Name = "fortifiesLine", EmitDefaultValue = true)]
        public string FortifiesLine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel {\n");
            sb.Append("  FullDirection: ").Append(FullDirection).Append("\n");
            sb.Append("  ShortDirection: ").Append(ShortDirection).Append("\n");
            sb.Append("  Replaces: ").Append(Replaces).Append("\n");
            sb.Append("  Via: ").Append(Via).Append("\n");
            sb.Append("  IsFreeService: ").Append(IsFreeService).Append("\n");
            sb.Append("  IsPaidService: ").Append(IsPaidService).Append("\n");
            sb.Append("  IsSwimmingService: ").Append(IsSwimmingService).Append("\n");
            sb.Append("  IsDirectDestinationBus: ").Append(IsDirectDestinationBus).Append("\n");
            sb.Append("  IsFrontEntry: ").Append(IsFrontEntry).Append("\n");
            sb.Append("  IsExtraBus: ").Append(IsExtraBus).Append("\n");
            sb.Append("  IsExtraBoat: ").Append(IsExtraBoat).Append("\n");
            sb.Append("  IsExtraTram: ").Append(IsExtraTram).Append("\n");
            sb.Append("  IsSchoolBus: ").Append(IsSchoolBus).Append("\n");
            sb.Append("  IsExpressBus: ").Append(IsExpressBus).Append("\n");
            sb.Append("  FortifiesLine: ").Append(FortifiesLine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FullDirection == input.FullDirection ||
                    (this.FullDirection != null &&
                    this.FullDirection.Equals(input.FullDirection))
                ) && 
                (
                    this.ShortDirection == input.ShortDirection ||
                    (this.ShortDirection != null &&
                    this.ShortDirection.Equals(input.ShortDirection))
                ) && 
                (
                    this.Replaces == input.Replaces ||
                    (this.Replaces != null &&
                    this.Replaces.Equals(input.Replaces))
                ) && 
                (
                    this.Via == input.Via ||
                    (this.Via != null &&
                    this.Via.Equals(input.Via))
                ) && 
                (
                    this.IsFreeService == input.IsFreeService ||
                    (this.IsFreeService != null &&
                    this.IsFreeService.Equals(input.IsFreeService))
                ) && 
                (
                    this.IsPaidService == input.IsPaidService ||
                    (this.IsPaidService != null &&
                    this.IsPaidService.Equals(input.IsPaidService))
                ) && 
                (
                    this.IsSwimmingService == input.IsSwimmingService ||
                    (this.IsSwimmingService != null &&
                    this.IsSwimmingService.Equals(input.IsSwimmingService))
                ) && 
                (
                    this.IsDirectDestinationBus == input.IsDirectDestinationBus ||
                    (this.IsDirectDestinationBus != null &&
                    this.IsDirectDestinationBus.Equals(input.IsDirectDestinationBus))
                ) && 
                (
                    this.IsFrontEntry == input.IsFrontEntry ||
                    (this.IsFrontEntry != null &&
                    this.IsFrontEntry.Equals(input.IsFrontEntry))
                ) && 
                (
                    this.IsExtraBus == input.IsExtraBus ||
                    (this.IsExtraBus != null &&
                    this.IsExtraBus.Equals(input.IsExtraBus))
                ) && 
                (
                    this.IsExtraBoat == input.IsExtraBoat ||
                    (this.IsExtraBoat != null &&
                    this.IsExtraBoat.Equals(input.IsExtraBoat))
                ) && 
                (
                    this.IsExtraTram == input.IsExtraTram ||
                    (this.IsExtraTram != null &&
                    this.IsExtraTram.Equals(input.IsExtraTram))
                ) && 
                (
                    this.IsSchoolBus == input.IsSchoolBus ||
                    (this.IsSchoolBus != null &&
                    this.IsSchoolBus.Equals(input.IsSchoolBus))
                ) && 
                (
                    this.IsExpressBus == input.IsExpressBus ||
                    (this.IsExpressBus != null &&
                    this.IsExpressBus.Equals(input.IsExpressBus))
                ) && 
                (
                    this.FortifiesLine == input.FortifiesLine ||
                    (this.FortifiesLine != null &&
                    this.FortifiesLine.Equals(input.FortifiesLine))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FullDirection != null)
                {
                    hashCode = (hashCode * 59) + this.FullDirection.GetHashCode();
                }
                if (this.ShortDirection != null)
                {
                    hashCode = (hashCode * 59) + this.ShortDirection.GetHashCode();
                }
                if (this.Replaces != null)
                {
                    hashCode = (hashCode * 59) + this.Replaces.GetHashCode();
                }
                if (this.Via != null)
                {
                    hashCode = (hashCode * 59) + this.Via.GetHashCode();
                }
                if (this.IsFreeService != null)
                {
                    hashCode = (hashCode * 59) + this.IsFreeService.GetHashCode();
                }
                if (this.IsPaidService != null)
                {
                    hashCode = (hashCode * 59) + this.IsPaidService.GetHashCode();
                }
                if (this.IsSwimmingService != null)
                {
                    hashCode = (hashCode * 59) + this.IsSwimmingService.GetHashCode();
                }
                if (this.IsDirectDestinationBus != null)
                {
                    hashCode = (hashCode * 59) + this.IsDirectDestinationBus.GetHashCode();
                }
                if (this.IsFrontEntry != null)
                {
                    hashCode = (hashCode * 59) + this.IsFrontEntry.GetHashCode();
                }
                if (this.IsExtraBus != null)
                {
                    hashCode = (hashCode * 59) + this.IsExtraBus.GetHashCode();
                }
                if (this.IsExtraBoat != null)
                {
                    hashCode = (hashCode * 59) + this.IsExtraBoat.GetHashCode();
                }
                if (this.IsExtraTram != null)
                {
                    hashCode = (hashCode * 59) + this.IsExtraTram.GetHashCode();
                }
                if (this.IsSchoolBus != null)
                {
                    hashCode = (hashCode * 59) + this.IsSchoolBus.GetHashCode();
                }
                if (this.IsExpressBus != null)
                {
                    hashCode = (hashCode * 59) + this.IsExpressBus.GetHashCode();
                }
                if (this.FortifiesLine != null)
                {
                    hashCode = (hashCode * 59) + this.FortifiesLine.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
