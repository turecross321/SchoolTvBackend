/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about a call on the trip leg.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.JourneyDetails.CallDetailsApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel" /> class.
        /// </summary>
        /// <param name="stopPoint">stopPoint (required).</param>
        /// <param name="plannedArrivalTime">The planned arrival time for the call in RFC 3339 format..</param>
        /// <param name="plannedDepartureTime">The planned departure time for the call in RFC 3339 format..</param>
        /// <param name="estimatedArrivalTime">The estimated arrival time for the call in RFC 3339 format..</param>
        /// <param name="estimatedDepartureTime">The estimated departure time for the call in RFC 3339 format..</param>
        /// <param name="plannedPlatform">The planned platform of the call..</param>
        /// <param name="estimatedPlatform">The estimated platform of the call..</param>
        /// <param name="latitude">The latitude of the stop point of the call..</param>
        /// <param name="longitude">The longitude of the stop point of the call..</param>
        /// <param name="index">The index of the stop point of the call..</param>
        /// <param name="isOnTripLeg">The call is on the trip leg..</param>
        /// <param name="isTripLegStart">The call is the first on the trip leg..</param>
        /// <param name="isTripLegStop">The call is the last on the trip leg..</param>
        /// <param name="tariffZones">The primary tariff zone of the call. A call can be related to a stop area with multiple tariff zones  and this is the zone that for example should be displayed in overviews etc..</param>
        /// <param name="occupancy">occupancy.</param>
        /// <param name="isCancelled">Flag indicating if the call is cancelled..</param>
        /// <param name="isDepartureCancelled">Flag indicating if the departure is cancelled..</param>
        /// <param name="isArrivalCancelled">Flag indicating if the arrival is cancelled..</param>
        public VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel(VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel stopPoint = default(VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel), string plannedArrivalTime = default(string), string plannedDepartureTime = default(string), string estimatedArrivalTime = default(string), string estimatedDepartureTime = default(string), string plannedPlatform = default(string), string estimatedPlatform = default(string), double? latitude = default(double?), double? longitude = default(double?), string index = default(string), bool? isOnTripLeg = default(bool?), bool? isTripLegStart = default(bool?), bool? isTripLegStop = default(bool?), List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel> tariffZones = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel>), VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel occupancy = default(VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel), bool isCancelled = default(bool), bool? isDepartureCancelled = default(bool?), bool? isArrivalCancelled = default(bool?))
        {
            // to ensure "stopPoint" is required (not null)
            if (stopPoint == null)
            {
                throw new ArgumentNullException("stopPoint is a required property for VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel and cannot be null");
            }
            this.StopPoint = stopPoint;
            this.PlannedArrivalTime = plannedArrivalTime;
            this.PlannedDepartureTime = plannedDepartureTime;
            this.EstimatedArrivalTime = estimatedArrivalTime;
            this.EstimatedDepartureTime = estimatedDepartureTime;
            this.PlannedPlatform = plannedPlatform;
            this.EstimatedPlatform = estimatedPlatform;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Index = index;
            this.IsOnTripLeg = isOnTripLeg;
            this.IsTripLegStart = isTripLegStart;
            this.IsTripLegStop = isTripLegStop;
            this.TariffZones = tariffZones;
            this.Occupancy = occupancy;
            this.IsCancelled = isCancelled;
            this.IsDepartureCancelled = isDepartureCancelled;
            this.IsArrivalCancelled = isArrivalCancelled;
        }

        /// <summary>
        /// Gets or Sets StopPoint
        /// </summary>
        [DataMember(Name = "stopPoint", IsRequired = true, EmitDefaultValue = true)]
        public VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel StopPoint { get; set; }

        /// <summary>
        /// The planned arrival time for the call in RFC 3339 format.
        /// </summary>
        /// <value>The planned arrival time for the call in RFC 3339 format.</value>
        [DataMember(Name = "plannedArrivalTime", EmitDefaultValue = true)]
        public string PlannedArrivalTime { get; set; }

        /// <summary>
        /// The planned departure time for the call in RFC 3339 format.
        /// </summary>
        /// <value>The planned departure time for the call in RFC 3339 format.</value>
        [DataMember(Name = "plannedDepartureTime", EmitDefaultValue = true)]
        public string PlannedDepartureTime { get; set; }

        /// <summary>
        /// The estimated arrival time for the call in RFC 3339 format.
        /// </summary>
        /// <value>The estimated arrival time for the call in RFC 3339 format.</value>
        [DataMember(Name = "estimatedArrivalTime", EmitDefaultValue = true)]
        public string EstimatedArrivalTime { get; set; }

        /// <summary>
        /// The estimated departure time for the call in RFC 3339 format.
        /// </summary>
        /// <value>The estimated departure time for the call in RFC 3339 format.</value>
        [DataMember(Name = "estimatedDepartureTime", EmitDefaultValue = true)]
        public string EstimatedDepartureTime { get; set; }

        /// <summary>
        /// The best known time of the call in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.
        /// </summary>
        /// <value>The best known time of the call in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.</value>
        [DataMember(Name = "estimatedOtherwisePlannedArrivalTime", EmitDefaultValue = true)]
        public string EstimatedOtherwisePlannedArrivalTime { get; private set; }

        /// <summary>
        /// Returns false as EstimatedOtherwisePlannedArrivalTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEstimatedOtherwisePlannedArrivalTime()
        {
            return false;
        }
        /// <summary>
        /// The best known time of the call in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.
        /// </summary>
        /// <value>The best known time of the call in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.</value>
        [DataMember(Name = "estimatedOtherwisePlannedDepartureTime", EmitDefaultValue = true)]
        public string EstimatedOtherwisePlannedDepartureTime { get; private set; }

        /// <summary>
        /// Returns false as EstimatedOtherwisePlannedDepartureTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEstimatedOtherwisePlannedDepartureTime()
        {
            return false;
        }
        /// <summary>
        /// The planned platform of the call.
        /// </summary>
        /// <value>The planned platform of the call.</value>
        [DataMember(Name = "plannedPlatform", EmitDefaultValue = true)]
        public string PlannedPlatform { get; set; }

        /// <summary>
        /// The estimated platform of the call.
        /// </summary>
        /// <value>The estimated platform of the call.</value>
        [DataMember(Name = "estimatedPlatform", EmitDefaultValue = true)]
        public string EstimatedPlatform { get; set; }

        /// <summary>
        /// The latitude of the stop point of the call.
        /// </summary>
        /// <value>The latitude of the stop point of the call.</value>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The longitude of the stop point of the call.
        /// </summary>
        /// <value>The longitude of the stop point of the call.</value>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// The index of the stop point of the call.
        /// </summary>
        /// <value>The index of the stop point of the call.</value>
        [DataMember(Name = "index", EmitDefaultValue = true)]
        public string Index { get; set; }

        /// <summary>
        /// The call is on the trip leg.
        /// </summary>
        /// <value>The call is on the trip leg.</value>
        [DataMember(Name = "isOnTripLeg", EmitDefaultValue = true)]
        public bool? IsOnTripLeg { get; set; }

        /// <summary>
        /// The call is the first on the trip leg.
        /// </summary>
        /// <value>The call is the first on the trip leg.</value>
        [DataMember(Name = "isTripLegStart", EmitDefaultValue = true)]
        public bool? IsTripLegStart { get; set; }

        /// <summary>
        /// The call is the last on the trip leg.
        /// </summary>
        /// <value>The call is the last on the trip leg.</value>
        [DataMember(Name = "isTripLegStop", EmitDefaultValue = true)]
        public bool? IsTripLegStop { get; set; }

        /// <summary>
        /// The primary tariff zone of the call. A call can be related to a stop area with multiple tariff zones  and this is the zone that for example should be displayed in overviews etc.
        /// </summary>
        /// <value>The primary tariff zone of the call. A call can be related to a stop area with multiple tariff zones  and this is the zone that for example should be displayed in overviews etc.</value>
        [DataMember(Name = "tariffZones", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel> TariffZones { get; set; }

        /// <summary>
        /// Gets or Sets Occupancy
        /// </summary>
        [DataMember(Name = "occupancy", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel Occupancy { get; set; }

        /// <summary>
        /// Flag indicating if the call is cancelled.
        /// </summary>
        /// <value>Flag indicating if the call is cancelled.</value>
        [DataMember(Name = "isCancelled", EmitDefaultValue = true)]
        public bool IsCancelled { get; set; }

        /// <summary>
        /// Flag indicating if the departure is cancelled.
        /// </summary>
        /// <value>Flag indicating if the departure is cancelled.</value>
        [DataMember(Name = "isDepartureCancelled", EmitDefaultValue = true)]
        public bool? IsDepartureCancelled { get; set; }

        /// <summary>
        /// Flag indicating if the arrival is cancelled.
        /// </summary>
        /// <value>Flag indicating if the arrival is cancelled.</value>
        [DataMember(Name = "isArrivalCancelled", EmitDefaultValue = true)]
        public bool? IsArrivalCancelled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel {\n");
            sb.Append("  StopPoint: ").Append(StopPoint).Append("\n");
            sb.Append("  PlannedArrivalTime: ").Append(PlannedArrivalTime).Append("\n");
            sb.Append("  PlannedDepartureTime: ").Append(PlannedDepartureTime).Append("\n");
            sb.Append("  EstimatedArrivalTime: ").Append(EstimatedArrivalTime).Append("\n");
            sb.Append("  EstimatedDepartureTime: ").Append(EstimatedDepartureTime).Append("\n");
            sb.Append("  EstimatedOtherwisePlannedArrivalTime: ").Append(EstimatedOtherwisePlannedArrivalTime).Append("\n");
            sb.Append("  EstimatedOtherwisePlannedDepartureTime: ").Append(EstimatedOtherwisePlannedDepartureTime).Append("\n");
            sb.Append("  PlannedPlatform: ").Append(PlannedPlatform).Append("\n");
            sb.Append("  EstimatedPlatform: ").Append(EstimatedPlatform).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IsOnTripLeg: ").Append(IsOnTripLeg).Append("\n");
            sb.Append("  IsTripLegStart: ").Append(IsTripLegStart).Append("\n");
            sb.Append("  IsTripLegStop: ").Append(IsTripLegStop).Append("\n");
            sb.Append("  TariffZones: ").Append(TariffZones).Append("\n");
            sb.Append("  Occupancy: ").Append(Occupancy).Append("\n");
            sb.Append("  IsCancelled: ").Append(IsCancelled).Append("\n");
            sb.Append("  IsDepartureCancelled: ").Append(IsDepartureCancelled).Append("\n");
            sb.Append("  IsArrivalCancelled: ").Append(IsArrivalCancelled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StopPoint == input.StopPoint ||
                    (this.StopPoint != null &&
                    this.StopPoint.Equals(input.StopPoint))
                ) && 
                (
                    this.PlannedArrivalTime == input.PlannedArrivalTime ||
                    (this.PlannedArrivalTime != null &&
                    this.PlannedArrivalTime.Equals(input.PlannedArrivalTime))
                ) && 
                (
                    this.PlannedDepartureTime == input.PlannedDepartureTime ||
                    (this.PlannedDepartureTime != null &&
                    this.PlannedDepartureTime.Equals(input.PlannedDepartureTime))
                ) && 
                (
                    this.EstimatedArrivalTime == input.EstimatedArrivalTime ||
                    (this.EstimatedArrivalTime != null &&
                    this.EstimatedArrivalTime.Equals(input.EstimatedArrivalTime))
                ) && 
                (
                    this.EstimatedDepartureTime == input.EstimatedDepartureTime ||
                    (this.EstimatedDepartureTime != null &&
                    this.EstimatedDepartureTime.Equals(input.EstimatedDepartureTime))
                ) && 
                (
                    this.EstimatedOtherwisePlannedArrivalTime == input.EstimatedOtherwisePlannedArrivalTime ||
                    (this.EstimatedOtherwisePlannedArrivalTime != null &&
                    this.EstimatedOtherwisePlannedArrivalTime.Equals(input.EstimatedOtherwisePlannedArrivalTime))
                ) && 
                (
                    this.EstimatedOtherwisePlannedDepartureTime == input.EstimatedOtherwisePlannedDepartureTime ||
                    (this.EstimatedOtherwisePlannedDepartureTime != null &&
                    this.EstimatedOtherwisePlannedDepartureTime.Equals(input.EstimatedOtherwisePlannedDepartureTime))
                ) && 
                (
                    this.PlannedPlatform == input.PlannedPlatform ||
                    (this.PlannedPlatform != null &&
                    this.PlannedPlatform.Equals(input.PlannedPlatform))
                ) && 
                (
                    this.EstimatedPlatform == input.EstimatedPlatform ||
                    (this.EstimatedPlatform != null &&
                    this.EstimatedPlatform.Equals(input.EstimatedPlatform))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.IsOnTripLeg == input.IsOnTripLeg ||
                    (this.IsOnTripLeg != null &&
                    this.IsOnTripLeg.Equals(input.IsOnTripLeg))
                ) && 
                (
                    this.IsTripLegStart == input.IsTripLegStart ||
                    (this.IsTripLegStart != null &&
                    this.IsTripLegStart.Equals(input.IsTripLegStart))
                ) && 
                (
                    this.IsTripLegStop == input.IsTripLegStop ||
                    (this.IsTripLegStop != null &&
                    this.IsTripLegStop.Equals(input.IsTripLegStop))
                ) && 
                (
                    this.TariffZones == input.TariffZones ||
                    this.TariffZones != null &&
                    input.TariffZones != null &&
                    this.TariffZones.SequenceEqual(input.TariffZones)
                ) && 
                (
                    this.Occupancy == input.Occupancy ||
                    (this.Occupancy != null &&
                    this.Occupancy.Equals(input.Occupancy))
                ) && 
                (
                    this.IsCancelled == input.IsCancelled ||
                    this.IsCancelled.Equals(input.IsCancelled)
                ) && 
                (
                    this.IsDepartureCancelled == input.IsDepartureCancelled ||
                    (this.IsDepartureCancelled != null &&
                    this.IsDepartureCancelled.Equals(input.IsDepartureCancelled))
                ) && 
                (
                    this.IsArrivalCancelled == input.IsArrivalCancelled ||
                    (this.IsArrivalCancelled != null &&
                    this.IsArrivalCancelled.Equals(input.IsArrivalCancelled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StopPoint != null)
                {
                    hashCode = (hashCode * 59) + this.StopPoint.GetHashCode();
                }
                if (this.PlannedArrivalTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedArrivalTime.GetHashCode();
                }
                if (this.PlannedDepartureTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedDepartureTime.GetHashCode();
                }
                if (this.EstimatedArrivalTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedArrivalTime.GetHashCode();
                }
                if (this.EstimatedDepartureTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedDepartureTime.GetHashCode();
                }
                if (this.EstimatedOtherwisePlannedArrivalTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedOtherwisePlannedArrivalTime.GetHashCode();
                }
                if (this.EstimatedOtherwisePlannedDepartureTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedOtherwisePlannedDepartureTime.GetHashCode();
                }
                if (this.PlannedPlatform != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedPlatform.GetHashCode();
                }
                if (this.EstimatedPlatform != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedPlatform.GetHashCode();
                }
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.Index != null)
                {
                    hashCode = (hashCode * 59) + this.Index.GetHashCode();
                }
                if (this.IsOnTripLeg != null)
                {
                    hashCode = (hashCode * 59) + this.IsOnTripLeg.GetHashCode();
                }
                if (this.IsTripLegStart != null)
                {
                    hashCode = (hashCode * 59) + this.IsTripLegStart.GetHashCode();
                }
                if (this.IsTripLegStop != null)
                {
                    hashCode = (hashCode * 59) + this.IsTripLegStop.GetHashCode();
                }
                if (this.TariffZones != null)
                {
                    hashCode = (hashCode * 59) + this.TariffZones.GetHashCode();
                }
                if (this.Occupancy != null)
                {
                    hashCode = (hashCode * 59) + this.Occupancy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCancelled.GetHashCode();
                if (this.IsDepartureCancelled != null)
                {
                    hashCode = (hashCode * 59) + this.IsDepartureCancelled.GetHashCode();
                }
                if (this.IsArrivalCancelled != null)
                {
                    hashCode = (hashCode * 59) + this.IsArrivalCancelled.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
