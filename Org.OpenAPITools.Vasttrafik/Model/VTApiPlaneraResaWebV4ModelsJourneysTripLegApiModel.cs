/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about a journey trip leg.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.Journeys.TripLegApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel" /> class.
        /// </summary>
        /// <param name="origin">origin (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="isCancelled">Flag indicating if the trip leg is cancelled. (required).</param>
        /// <param name="isPartCancelled">Flag indicating if the trip leg is partially cancelled..</param>
        /// <param name="serviceJourney">serviceJourney.</param>
        /// <param name="notes">An ordered list (most important first) of notes related to the trip leg..</param>
        /// <param name="estimatedDistanceInMeters">Estimated distance in meters. Only for transport mode Walk..</param>
        /// <param name="plannedConnectingTimeInMinutes">The planned (according to timetable) connecting time in minutes relative to  the previous public transport trip leg (if any)..</param>
        /// <param name="estimatedConnectingTimeInMinutes">The estimated (according to real-time data) connecting time in minutes relative to  the previous public transport trip leg (if any)..</param>
        /// <param name="isRiskOfMissingConnection">Flag indicating that there is less than 5 minutes margin between arriving at the  origin stop point and the departure from that stop point..</param>
        /// <param name="plannedDepartureTime">The planned departure time in RFC 3339 format..</param>
        /// <param name="plannedArrivalTime">The planned arrival time in RFC 3339 format..</param>
        /// <param name="plannedDurationInMinutes">The planned duration in minutes..</param>
        /// <param name="estimatedDepartureTime">The estimated departure time in RFC 3339 format, if available..</param>
        /// <param name="estimatedArrivalTime">The estimated arrival time in RFC 3339 format, if available..</param>
        /// <param name="estimatedDurationInMinutes">The estimated duration in minutes, if available..</param>
        /// <param name="occupancy">occupancy.</param>
        /// <param name="journeyLegIndex">Index of Leg in Journey.</param>
        /// <param name="padamUrls">padamUrls.</param>
        public VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel(VTApiPlaneraResaWebV4ModelsJourneysCallApiModel origin = default(VTApiPlaneraResaWebV4ModelsJourneysCallApiModel), VTApiPlaneraResaWebV4ModelsJourneysCallApiModel destination = default(VTApiPlaneraResaWebV4ModelsJourneysCallApiModel), bool isCancelled = default(bool), bool isPartCancelled = default(bool), VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel serviceJourney = default(VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel), List<VTApiPlaneraResaWebV4ModelsNoteApiModel> notes = default(List<VTApiPlaneraResaWebV4ModelsNoteApiModel>), int? estimatedDistanceInMeters = default(int?), int? plannedConnectingTimeInMinutes = default(int?), int? estimatedConnectingTimeInMinutes = default(int?), bool? isRiskOfMissingConnection = default(bool?), string plannedDepartureTime = default(string), string plannedArrivalTime = default(string), int? plannedDurationInMinutes = default(int?), string estimatedDepartureTime = default(string), string estimatedArrivalTime = default(string), int? estimatedDurationInMinutes = default(int?), VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel occupancy = default(VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel), int journeyLegIndex = default(int), VTApiPlaneraResaWebV4ModelsJourneysPadamUrlsApiModel padamUrls = default(VTApiPlaneraResaWebV4ModelsJourneysPadamUrlsApiModel))
        {
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel and cannot be null");
            }
            this.Origin = origin;
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel and cannot be null");
            }
            this.Destination = destination;
            this.IsCancelled = isCancelled;
            this.IsPartCancelled = isPartCancelled;
            this.ServiceJourney = serviceJourney;
            this.Notes = notes;
            this.EstimatedDistanceInMeters = estimatedDistanceInMeters;
            this.PlannedConnectingTimeInMinutes = plannedConnectingTimeInMinutes;
            this.EstimatedConnectingTimeInMinutes = estimatedConnectingTimeInMinutes;
            this.IsRiskOfMissingConnection = isRiskOfMissingConnection;
            this.PlannedDepartureTime = plannedDepartureTime;
            this.PlannedArrivalTime = plannedArrivalTime;
            this.PlannedDurationInMinutes = plannedDurationInMinutes;
            this.EstimatedDepartureTime = estimatedDepartureTime;
            this.EstimatedArrivalTime = estimatedArrivalTime;
            this.EstimatedDurationInMinutes = estimatedDurationInMinutes;
            this.Occupancy = occupancy;
            this.JourneyLegIndex = journeyLegIndex;
            this.PadamUrls = padamUrls;
        }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = true)]
        public VTApiPlaneraResaWebV4ModelsJourneysCallApiModel Origin { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public VTApiPlaneraResaWebV4ModelsJourneysCallApiModel Destination { get; set; }

        /// <summary>
        /// Flag indicating if the trip leg is cancelled.
        /// </summary>
        /// <value>Flag indicating if the trip leg is cancelled.</value>
        [DataMember(Name = "isCancelled", IsRequired = true, EmitDefaultValue = true)]
        public bool IsCancelled { get; set; }

        /// <summary>
        /// Flag indicating if the trip leg is partially cancelled.
        /// </summary>
        /// <value>Flag indicating if the trip leg is partially cancelled.</value>
        [DataMember(Name = "isPartCancelled", EmitDefaultValue = true)]
        public bool IsPartCancelled { get; set; }

        /// <summary>
        /// Gets or Sets ServiceJourney
        /// </summary>
        [DataMember(Name = "serviceJourney", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel ServiceJourney { get; set; }

        /// <summary>
        /// An ordered list (most important first) of notes related to the trip leg.
        /// </summary>
        /// <value>An ordered list (most important first) of notes related to the trip leg.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsNoteApiModel> Notes { get; set; }

        /// <summary>
        /// Estimated distance in meters. Only for transport mode Walk.
        /// </summary>
        /// <value>Estimated distance in meters. Only for transport mode Walk.</value>
        [DataMember(Name = "estimatedDistanceInMeters", EmitDefaultValue = true)]
        public int? EstimatedDistanceInMeters { get; set; }

        /// <summary>
        /// The planned (according to timetable) connecting time in minutes relative to  the previous public transport trip leg (if any).
        /// </summary>
        /// <value>The planned (according to timetable) connecting time in minutes relative to  the previous public transport trip leg (if any).</value>
        [DataMember(Name = "plannedConnectingTimeInMinutes", EmitDefaultValue = true)]
        public int? PlannedConnectingTimeInMinutes { get; set; }

        /// <summary>
        /// The estimated (according to real-time data) connecting time in minutes relative to  the previous public transport trip leg (if any).
        /// </summary>
        /// <value>The estimated (according to real-time data) connecting time in minutes relative to  the previous public transport trip leg (if any).</value>
        [DataMember(Name = "estimatedConnectingTimeInMinutes", EmitDefaultValue = true)]
        public int? EstimatedConnectingTimeInMinutes { get; set; }

        /// <summary>
        /// Flag indicating that there is less than 5 minutes margin between arriving at the  origin stop point and the departure from that stop point.
        /// </summary>
        /// <value>Flag indicating that there is less than 5 minutes margin between arriving at the  origin stop point and the departure from that stop point.</value>
        [DataMember(Name = "isRiskOfMissingConnection", EmitDefaultValue = true)]
        public bool? IsRiskOfMissingConnection { get; set; }

        /// <summary>
        /// The planned departure time in RFC 3339 format.
        /// </summary>
        /// <value>The planned departure time in RFC 3339 format.</value>
        [DataMember(Name = "plannedDepartureTime", EmitDefaultValue = true)]
        public string PlannedDepartureTime { get; set; }

        /// <summary>
        /// The planned arrival time in RFC 3339 format.
        /// </summary>
        /// <value>The planned arrival time in RFC 3339 format.</value>
        [DataMember(Name = "plannedArrivalTime", EmitDefaultValue = true)]
        public string PlannedArrivalTime { get; set; }

        /// <summary>
        /// The planned duration in minutes.
        /// </summary>
        /// <value>The planned duration in minutes.</value>
        [DataMember(Name = "plannedDurationInMinutes", EmitDefaultValue = true)]
        public int? PlannedDurationInMinutes { get; set; }

        /// <summary>
        /// The estimated departure time in RFC 3339 format, if available.
        /// </summary>
        /// <value>The estimated departure time in RFC 3339 format, if available.</value>
        [DataMember(Name = "estimatedDepartureTime", EmitDefaultValue = true)]
        public string EstimatedDepartureTime { get; set; }

        /// <summary>
        /// The estimated arrival time in RFC 3339 format, if available.
        /// </summary>
        /// <value>The estimated arrival time in RFC 3339 format, if available.</value>
        [DataMember(Name = "estimatedArrivalTime", EmitDefaultValue = true)]
        public string EstimatedArrivalTime { get; set; }

        /// <summary>
        /// The estimated duration in minutes, if available.
        /// </summary>
        /// <value>The estimated duration in minutes, if available.</value>
        [DataMember(Name = "estimatedDurationInMinutes", EmitDefaultValue = true)]
        public int? EstimatedDurationInMinutes { get; set; }

        /// <summary>
        /// The best known time of the arrival in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.
        /// </summary>
        /// <value>The best known time of the arrival in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.</value>
        [DataMember(Name = "estimatedOtherwisePlannedArrivalTime", EmitDefaultValue = true)]
        public string EstimatedOtherwisePlannedArrivalTime { get; private set; }

        /// <summary>
        /// Returns false as EstimatedOtherwisePlannedArrivalTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEstimatedOtherwisePlannedArrivalTime()
        {
            return false;
        }
        /// <summary>
        /// The best known time of the departure in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.
        /// </summary>
        /// <value>The best known time of the departure in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.</value>
        [DataMember(Name = "estimatedOtherwisePlannedDepartureTime", EmitDefaultValue = true)]
        public string EstimatedOtherwisePlannedDepartureTime { get; private set; }

        /// <summary>
        /// Returns false as EstimatedOtherwisePlannedDepartureTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEstimatedOtherwisePlannedDepartureTime()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Occupancy
        /// </summary>
        [DataMember(Name = "occupancy", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel Occupancy { get; set; }

        /// <summary>
        /// Index of Leg in Journey
        /// </summary>
        /// <value>Index of Leg in Journey</value>
        [DataMember(Name = "journeyLegIndex", EmitDefaultValue = false)]
        public int JourneyLegIndex { get; set; }

        /// <summary>
        /// Gets or Sets PadamUrls
        /// </summary>
        [DataMember(Name = "padamUrls", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsJourneysPadamUrlsApiModel PadamUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel {\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  IsCancelled: ").Append(IsCancelled).Append("\n");
            sb.Append("  IsPartCancelled: ").Append(IsPartCancelled).Append("\n");
            sb.Append("  ServiceJourney: ").Append(ServiceJourney).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  EstimatedDistanceInMeters: ").Append(EstimatedDistanceInMeters).Append("\n");
            sb.Append("  PlannedConnectingTimeInMinutes: ").Append(PlannedConnectingTimeInMinutes).Append("\n");
            sb.Append("  EstimatedConnectingTimeInMinutes: ").Append(EstimatedConnectingTimeInMinutes).Append("\n");
            sb.Append("  IsRiskOfMissingConnection: ").Append(IsRiskOfMissingConnection).Append("\n");
            sb.Append("  PlannedDepartureTime: ").Append(PlannedDepartureTime).Append("\n");
            sb.Append("  PlannedArrivalTime: ").Append(PlannedArrivalTime).Append("\n");
            sb.Append("  PlannedDurationInMinutes: ").Append(PlannedDurationInMinutes).Append("\n");
            sb.Append("  EstimatedDepartureTime: ").Append(EstimatedDepartureTime).Append("\n");
            sb.Append("  EstimatedArrivalTime: ").Append(EstimatedArrivalTime).Append("\n");
            sb.Append("  EstimatedDurationInMinutes: ").Append(EstimatedDurationInMinutes).Append("\n");
            sb.Append("  EstimatedOtherwisePlannedArrivalTime: ").Append(EstimatedOtherwisePlannedArrivalTime).Append("\n");
            sb.Append("  EstimatedOtherwisePlannedDepartureTime: ").Append(EstimatedOtherwisePlannedDepartureTime).Append("\n");
            sb.Append("  Occupancy: ").Append(Occupancy).Append("\n");
            sb.Append("  JourneyLegIndex: ").Append(JourneyLegIndex).Append("\n");
            sb.Append("  PadamUrls: ").Append(PadamUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.IsCancelled == input.IsCancelled ||
                    this.IsCancelled.Equals(input.IsCancelled)
                ) && 
                (
                    this.IsPartCancelled == input.IsPartCancelled ||
                    this.IsPartCancelled.Equals(input.IsPartCancelled)
                ) && 
                (
                    this.ServiceJourney == input.ServiceJourney ||
                    (this.ServiceJourney != null &&
                    this.ServiceJourney.Equals(input.ServiceJourney))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.EstimatedDistanceInMeters == input.EstimatedDistanceInMeters ||
                    (this.EstimatedDistanceInMeters != null &&
                    this.EstimatedDistanceInMeters.Equals(input.EstimatedDistanceInMeters))
                ) && 
                (
                    this.PlannedConnectingTimeInMinutes == input.PlannedConnectingTimeInMinutes ||
                    (this.PlannedConnectingTimeInMinutes != null &&
                    this.PlannedConnectingTimeInMinutes.Equals(input.PlannedConnectingTimeInMinutes))
                ) && 
                (
                    this.EstimatedConnectingTimeInMinutes == input.EstimatedConnectingTimeInMinutes ||
                    (this.EstimatedConnectingTimeInMinutes != null &&
                    this.EstimatedConnectingTimeInMinutes.Equals(input.EstimatedConnectingTimeInMinutes))
                ) && 
                (
                    this.IsRiskOfMissingConnection == input.IsRiskOfMissingConnection ||
                    (this.IsRiskOfMissingConnection != null &&
                    this.IsRiskOfMissingConnection.Equals(input.IsRiskOfMissingConnection))
                ) && 
                (
                    this.PlannedDepartureTime == input.PlannedDepartureTime ||
                    (this.PlannedDepartureTime != null &&
                    this.PlannedDepartureTime.Equals(input.PlannedDepartureTime))
                ) && 
                (
                    this.PlannedArrivalTime == input.PlannedArrivalTime ||
                    (this.PlannedArrivalTime != null &&
                    this.PlannedArrivalTime.Equals(input.PlannedArrivalTime))
                ) && 
                (
                    this.PlannedDurationInMinutes == input.PlannedDurationInMinutes ||
                    (this.PlannedDurationInMinutes != null &&
                    this.PlannedDurationInMinutes.Equals(input.PlannedDurationInMinutes))
                ) && 
                (
                    this.EstimatedDepartureTime == input.EstimatedDepartureTime ||
                    (this.EstimatedDepartureTime != null &&
                    this.EstimatedDepartureTime.Equals(input.EstimatedDepartureTime))
                ) && 
                (
                    this.EstimatedArrivalTime == input.EstimatedArrivalTime ||
                    (this.EstimatedArrivalTime != null &&
                    this.EstimatedArrivalTime.Equals(input.EstimatedArrivalTime))
                ) && 
                (
                    this.EstimatedDurationInMinutes == input.EstimatedDurationInMinutes ||
                    (this.EstimatedDurationInMinutes != null &&
                    this.EstimatedDurationInMinutes.Equals(input.EstimatedDurationInMinutes))
                ) && 
                (
                    this.EstimatedOtherwisePlannedArrivalTime == input.EstimatedOtherwisePlannedArrivalTime ||
                    (this.EstimatedOtherwisePlannedArrivalTime != null &&
                    this.EstimatedOtherwisePlannedArrivalTime.Equals(input.EstimatedOtherwisePlannedArrivalTime))
                ) && 
                (
                    this.EstimatedOtherwisePlannedDepartureTime == input.EstimatedOtherwisePlannedDepartureTime ||
                    (this.EstimatedOtherwisePlannedDepartureTime != null &&
                    this.EstimatedOtherwisePlannedDepartureTime.Equals(input.EstimatedOtherwisePlannedDepartureTime))
                ) && 
                (
                    this.Occupancy == input.Occupancy ||
                    (this.Occupancy != null &&
                    this.Occupancy.Equals(input.Occupancy))
                ) && 
                (
                    this.JourneyLegIndex == input.JourneyLegIndex ||
                    this.JourneyLegIndex.Equals(input.JourneyLegIndex)
                ) && 
                (
                    this.PadamUrls == input.PadamUrls ||
                    (this.PadamUrls != null &&
                    this.PadamUrls.Equals(input.PadamUrls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCancelled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPartCancelled.GetHashCode();
                if (this.ServiceJourney != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceJourney.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.EstimatedDistanceInMeters != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedDistanceInMeters.GetHashCode();
                }
                if (this.PlannedConnectingTimeInMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedConnectingTimeInMinutes.GetHashCode();
                }
                if (this.EstimatedConnectingTimeInMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedConnectingTimeInMinutes.GetHashCode();
                }
                if (this.IsRiskOfMissingConnection != null)
                {
                    hashCode = (hashCode * 59) + this.IsRiskOfMissingConnection.GetHashCode();
                }
                if (this.PlannedDepartureTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedDepartureTime.GetHashCode();
                }
                if (this.PlannedArrivalTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedArrivalTime.GetHashCode();
                }
                if (this.PlannedDurationInMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedDurationInMinutes.GetHashCode();
                }
                if (this.EstimatedDepartureTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedDepartureTime.GetHashCode();
                }
                if (this.EstimatedArrivalTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedArrivalTime.GetHashCode();
                }
                if (this.EstimatedDurationInMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedDurationInMinutes.GetHashCode();
                }
                if (this.EstimatedOtherwisePlannedArrivalTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedOtherwisePlannedArrivalTime.GetHashCode();
                }
                if (this.EstimatedOtherwisePlannedDepartureTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedOtherwisePlannedDepartureTime.GetHashCode();
                }
                if (this.Occupancy != null)
                {
                    hashCode = (hashCode * 59) + this.Occupancy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JourneyLegIndex.GetHashCode();
                if (this.PadamUrls != null)
                {
                    hashCode = (hashCode * 59) + this.PadamUrls.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
