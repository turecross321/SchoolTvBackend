/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about the time validity of a ticket suggestion.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.JourneyDetails.TimeValidityApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsTimeValidityType? Type { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsTimeValidityUnit? Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="amount">The amount of the unit specified by the Unit property. Always used together with the Unit property..</param>
        /// <param name="unit">unit.</param>
        /// <param name="fromDate">The from date of a date interval specified in RFC 3339 format. Always used together with the  ToDate property..</param>
        /// <param name="toDate">The to date of a date interval specified in RFC 3339 format. Always used together with the  FromDate property..</param>
        /// <param name="fromDateTime">The from time of a datetime interval specified in RFC 3339 format. Always used together with  the ToDateTime property..</param>
        /// <param name="toDateTime">The to time of a datetime interval specified in RFC 3339 format. Always used together with  the FromDateTime property..</param>
        public VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel(VTApiPlaneraResaWebV4ModelsTimeValidityType? type = default(VTApiPlaneraResaWebV4ModelsTimeValidityType?), int? amount = default(int?), VTApiPlaneraResaWebV4ModelsTimeValidityUnit? unit = default(VTApiPlaneraResaWebV4ModelsTimeValidityUnit?), string fromDate = default(string), string toDate = default(string), string fromDateTime = default(string), string toDateTime = default(string))
        {
            this.Type = type;
            this.Amount = amount;
            this.Unit = unit;
            this.FromDate = fromDate;
            this.ToDate = toDate;
            this.FromDateTime = fromDateTime;
            this.ToDateTime = toDateTime;
        }

        /// <summary>
        /// The amount of the unit specified by the Unit property. Always used together with the Unit property.
        /// </summary>
        /// <value>The amount of the unit specified by the Unit property. Always used together with the Unit property.</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public int? Amount { get; set; }

        /// <summary>
        /// The from date of a date interval specified in RFC 3339 format. Always used together with the  ToDate property.
        /// </summary>
        /// <value>The from date of a date interval specified in RFC 3339 format. Always used together with the  ToDate property.</value>
        /// <example>2018-11-29</example>
        [DataMember(Name = "fromDate", EmitDefaultValue = true)]
        public string FromDate { get; set; }

        /// <summary>
        /// The to date of a date interval specified in RFC 3339 format. Always used together with the  FromDate property.
        /// </summary>
        /// <value>The to date of a date interval specified in RFC 3339 format. Always used together with the  FromDate property.</value>
        /// <example>2018-11-30</example>
        [DataMember(Name = "toDate", EmitDefaultValue = true)]
        public string ToDate { get; set; }

        /// <summary>
        /// The from time of a datetime interval specified in RFC 3339 format. Always used together with  the ToDateTime property.
        /// </summary>
        /// <value>The from time of a datetime interval specified in RFC 3339 format. Always used together with  the ToDateTime property.</value>
        /// <example>2018-11-30T17:07:10+01:00</example>
        [DataMember(Name = "fromDateTime", EmitDefaultValue = true)]
        public string FromDateTime { get; set; }

        /// <summary>
        /// The to time of a datetime interval specified in RFC 3339 format. Always used together with  the FromDateTime property.
        /// </summary>
        /// <value>The to time of a datetime interval specified in RFC 3339 format. Always used together with  the FromDateTime property.</value>
        /// <example>2018-11-30T17:07:10+01:00</example>
        [DataMember(Name = "toDateTime", EmitDefaultValue = true)]
        public string ToDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  FromDateTime: ").Append(FromDateTime).Append("\n");
            sb.Append("  ToDateTime: ").Append(ToDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Unit == input.Unit ||
                    this.Unit.Equals(input.Unit)
                ) && 
                (
                    this.FromDate == input.FromDate ||
                    (this.FromDate != null &&
                    this.FromDate.Equals(input.FromDate))
                ) && 
                (
                    this.ToDate == input.ToDate ||
                    (this.ToDate != null &&
                    this.ToDate.Equals(input.ToDate))
                ) && 
                (
                    this.FromDateTime == input.FromDateTime ||
                    (this.FromDateTime != null &&
                    this.FromDateTime.Equals(input.FromDateTime))
                ) && 
                (
                    this.ToDateTime == input.ToDateTime ||
                    (this.ToDateTime != null &&
                    this.ToDateTime.Equals(input.ToDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                if (this.FromDate != null)
                {
                    hashCode = (hashCode * 59) + this.FromDate.GetHashCode();
                }
                if (this.ToDate != null)
                {
                    hashCode = (hashCode * 59) + this.ToDate.GetHashCode();
                }
                if (this.FromDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.FromDateTime.GetHashCode();
                }
                if (this.ToDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ToDateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
