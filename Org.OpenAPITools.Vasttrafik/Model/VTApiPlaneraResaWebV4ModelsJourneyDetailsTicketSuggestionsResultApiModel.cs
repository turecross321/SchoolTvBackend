/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.JourneyDetails.TicketSuggestionsResultApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel" /> class.
        /// </summary>
        /// <param name="hasError">Flag indicating that an error occurred while getting ticket suggestions..</param>
        /// <param name="ticketSuggestions">Ticket suggestions for a journey..</param>
        /// <param name="ticketValidities">An array with the tickets from the existingTickets-array in the post-body. Validity for the journey is indicated for each ticket in the array. Included if &#39;ticketsuggestions&#39; is passed in the includes array in the request, otherwise null..</param>
        public VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel(bool hasError = default(bool), List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel> ticketSuggestions = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel>), List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketValidityApiModel> ticketValidities = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketValidityApiModel>))
        {
            this.HasError = hasError;
            this.TicketSuggestions = ticketSuggestions;
            this.TicketValidities = ticketValidities;
        }

        /// <summary>
        /// Flag indicating that an error occurred while getting ticket suggestions.
        /// </summary>
        /// <value>Flag indicating that an error occurred while getting ticket suggestions.</value>
        [DataMember(Name = "hasError", EmitDefaultValue = true)]
        public bool HasError { get; set; }

        /// <summary>
        /// Ticket suggestions for a journey.
        /// </summary>
        /// <value>Ticket suggestions for a journey.</value>
        [DataMember(Name = "ticketSuggestions", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel> TicketSuggestions { get; set; }

        /// <summary>
        /// An array with the tickets from the existingTickets-array in the post-body. Validity for the journey is indicated for each ticket in the array. Included if &#39;ticketsuggestions&#39; is passed in the includes array in the request, otherwise null.
        /// </summary>
        /// <value>An array with the tickets from the existingTickets-array in the post-body. Validity for the journey is indicated for each ticket in the array. Included if &#39;ticketsuggestions&#39; is passed in the includes array in the request, otherwise null.</value>
        [DataMember(Name = "ticketValidities", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketValidityApiModel> TicketValidities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel {\n");
            sb.Append("  HasError: ").Append(HasError).Append("\n");
            sb.Append("  TicketSuggestions: ").Append(TicketSuggestions).Append("\n");
            sb.Append("  TicketValidities: ").Append(TicketValidities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HasError == input.HasError ||
                    this.HasError.Equals(input.HasError)
                ) && 
                (
                    this.TicketSuggestions == input.TicketSuggestions ||
                    this.TicketSuggestions != null &&
                    input.TicketSuggestions != null &&
                    this.TicketSuggestions.SequenceEqual(input.TicketSuggestions)
                ) && 
                (
                    this.TicketValidities == input.TicketValidities ||
                    this.TicketValidities != null &&
                    input.TicketValidities != null &&
                    this.TicketValidities.SequenceEqual(input.TicketValidities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HasError.GetHashCode();
                if (this.TicketSuggestions != null)
                {
                    hashCode = (hashCode * 59) + this.TicketSuggestions.GetHashCode();
                }
                if (this.TicketValidities != null)
                {
                    hashCode = (hashCode * 59) + this.TicketValidities.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
