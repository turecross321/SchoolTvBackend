/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.JourneyDetails.ExistingTicketApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel" /> class.
        /// </summary>
        /// <param name="id">An Id for matching this existingTicket with ticketValidityApiModel in response..</param>
        /// <param name="offerSpecification">From TicketSuggestionApiModel.</param>
        /// <param name="timeOfIssue">Must be specified in RFC 3339 format.</param>
        /// <param name="timeOfActivation">Must be specified in RFC 3339 format.</param>
        public VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel(string id = default(string), string offerSpecification = default(string), string timeOfIssue = default(string), string timeOfActivation = default(string))
        {
            this.Id = id;
            this.OfferSpecification = offerSpecification;
            this.TimeOfIssue = timeOfIssue;
            this.TimeOfActivation = timeOfActivation;
        }

        /// <summary>
        /// An Id for matching this existingTicket with ticketValidityApiModel in response.
        /// </summary>
        /// <value>An Id for matching this existingTicket with ticketValidityApiModel in response.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// From TicketSuggestionApiModel
        /// </summary>
        /// <value>From TicketSuggestionApiModel</value>
        [DataMember(Name = "offerSpecification", EmitDefaultValue = true)]
        public string OfferSpecification { get; set; }

        /// <summary>
        /// Must be specified in RFC 3339 format
        /// </summary>
        /// <value>Must be specified in RFC 3339 format</value>
        [DataMember(Name = "timeOfIssue", EmitDefaultValue = true)]
        public string TimeOfIssue { get; set; }

        /// <summary>
        /// Must be specified in RFC 3339 format
        /// </summary>
        /// <value>Must be specified in RFC 3339 format</value>
        [DataMember(Name = "timeOfActivation", EmitDefaultValue = true)]
        public string TimeOfActivation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OfferSpecification: ").Append(OfferSpecification).Append("\n");
            sb.Append("  TimeOfIssue: ").Append(TimeOfIssue).Append("\n");
            sb.Append("  TimeOfActivation: ").Append(TimeOfActivation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OfferSpecification == input.OfferSpecification ||
                    (this.OfferSpecification != null &&
                    this.OfferSpecification.Equals(input.OfferSpecification))
                ) && 
                (
                    this.TimeOfIssue == input.TimeOfIssue ||
                    (this.TimeOfIssue != null &&
                    this.TimeOfIssue.Equals(input.TimeOfIssue))
                ) && 
                (
                    this.TimeOfActivation == input.TimeOfActivation ||
                    (this.TimeOfActivation != null &&
                    this.TimeOfActivation.Equals(input.TimeOfActivation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.OfferSpecification != null)
                {
                    hashCode = (hashCode * 59) + this.OfferSpecification.GetHashCode();
                }
                if (this.TimeOfIssue != null)
                {
                    hashCode = (hashCode * 59) + this.TimeOfIssue.GetHashCode();
                }
                if (this.TimeOfActivation != null)
                {
                    hashCode = (hashCode * 59) + this.TimeOfActivation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
