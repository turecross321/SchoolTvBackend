/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about a service journey of a departure or arrival.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.DeparturesAndArrivals.ServiceJourneyApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel" /> class.
        /// </summary>
        /// <param name="gid">16-digit Västtrafik service journey gid. (required).</param>
        /// <param name="origin">A description of the origin..</param>
        /// <param name="direction">A description of the direction..</param>
        /// <param name="directionDetails">directionDetails.</param>
        /// <param name="line">line.</param>
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel(string gid = default(string), string origin = default(string), string direction = default(string), VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel directionDetails = default(VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel), VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel line = default(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel))
        {
            // to ensure "gid" is required (not null)
            if (gid == null)
            {
                throw new ArgumentNullException("gid is a required property for VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel and cannot be null");
            }
            this.Gid = gid;
            this.Origin = origin;
            this.Direction = direction;
            this.DirectionDetails = directionDetails;
            this.Line = line;
        }

        /// <summary>
        /// 16-digit Västtrafik service journey gid.
        /// </summary>
        /// <value>16-digit Västtrafik service journey gid.</value>
        [DataMember(Name = "gid", IsRequired = true, EmitDefaultValue = true)]
        public string Gid { get; set; }

        /// <summary>
        /// A description of the origin.
        /// </summary>
        /// <value>A description of the origin.</value>
        [DataMember(Name = "origin", EmitDefaultValue = true)]
        public string Origin { get; set; }

        /// <summary>
        /// A description of the direction.
        /// </summary>
        /// <value>A description of the direction.</value>
        [DataMember(Name = "direction", EmitDefaultValue = true)]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or Sets DirectionDetails
        /// </summary>
        [DataMember(Name = "directionDetails", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsDirectionDetailsApiModel DirectionDetails { get; set; }

        /// <summary>
        /// Gets or Sets Line
        /// </summary>
        [DataMember(Name = "line", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel Line { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  DirectionDetails: ").Append(DirectionDetails).Append("\n");
            sb.Append("  Line: ").Append(Line).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Gid == input.Gid ||
                    (this.Gid != null &&
                    this.Gid.Equals(input.Gid))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.DirectionDetails == input.DirectionDetails ||
                    (this.DirectionDetails != null &&
                    this.DirectionDetails.Equals(input.DirectionDetails))
                ) && 
                (
                    this.Line == input.Line ||
                    (this.Line != null &&
                    this.Line.Equals(input.Line))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gid != null)
                {
                    hashCode = (hashCode * 59) + this.Gid.GetHashCode();
                }
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                if (this.Direction != null)
                {
                    hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                }
                if (this.DirectionDetails != null)
                {
                    hashCode = (hashCode * 59) + this.DirectionDetails.GetHashCode();
                }
                if (this.Line != null)
                {
                    hashCode = (hashCode * 59) + this.Line.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Gid (string) minLength
            if (this.Gid != null && this.Gid.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Gid, length must be greater than 1.", new [] { "Gid" });
            }

            yield break;
        }
    }

}
