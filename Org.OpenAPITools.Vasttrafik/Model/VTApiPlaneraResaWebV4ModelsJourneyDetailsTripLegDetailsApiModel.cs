/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Detailed information about a Public Transport trip leg.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.JourneyDetails.TripLegDetailsApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel" /> class.
        /// </summary>
        /// <param name="serviceJourneys">The service journey for the trip leg..</param>
        /// <param name="callsOnTripLeg">The calls on the trip leg..</param>
        /// <param name="tripLegCoordinates">The coordinates for the trip leg..</param>
        /// <param name="tariffZones">The tariff zones that the trip leg traverses..</param>
        /// <param name="isCancelled">Flag indicating if the trip leg is cancelled..</param>
        /// <param name="isPartCancelled">Flag indicating if the trip leg is partially cancelled..</param>
        /// <param name="occupancy">occupancy.</param>
        /// <param name="journeyLegIndex">Index of Leg in Journey.</param>
        public VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel> serviceJourneys = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel>), List<VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel> callsOnTripLeg = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel>), List<VTApiPlaneraResaWebV4ModelsCoordinateApiModel> tripLegCoordinates = default(List<VTApiPlaneraResaWebV4ModelsCoordinateApiModel>), List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel> tariffZones = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel>), bool isCancelled = default(bool), bool isPartCancelled = default(bool), VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel occupancy = default(VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel), int journeyLegIndex = default(int))
        {
            this.ServiceJourneys = serviceJourneys;
            this.CallsOnTripLeg = callsOnTripLeg;
            this.TripLegCoordinates = tripLegCoordinates;
            this.TariffZones = tariffZones;
            this.IsCancelled = isCancelled;
            this.IsPartCancelled = isPartCancelled;
            this.Occupancy = occupancy;
            this.JourneyLegIndex = journeyLegIndex;
        }

        /// <summary>
        /// The service journey for the trip leg.
        /// </summary>
        /// <value>The service journey for the trip leg.</value>
        [DataMember(Name = "serviceJourneys", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel> ServiceJourneys { get; set; }

        /// <summary>
        /// The calls on the trip leg.
        /// </summary>
        /// <value>The calls on the trip leg.</value>
        [DataMember(Name = "callsOnTripLeg", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel> CallsOnTripLeg { get; set; }

        /// <summary>
        /// The coordinates for the trip leg.
        /// </summary>
        /// <value>The coordinates for the trip leg.</value>
        [DataMember(Name = "tripLegCoordinates", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsCoordinateApiModel> TripLegCoordinates { get; set; }

        /// <summary>
        /// The tariff zones that the trip leg traverses.
        /// </summary>
        /// <value>The tariff zones that the trip leg traverses.</value>
        [DataMember(Name = "tariffZones", EmitDefaultValue = true)]
        public List<VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel> TariffZones { get; set; }

        /// <summary>
        /// Flag indicating if the trip leg is cancelled.
        /// </summary>
        /// <value>Flag indicating if the trip leg is cancelled.</value>
        [DataMember(Name = "isCancelled", EmitDefaultValue = true)]
        public bool IsCancelled { get; set; }

        /// <summary>
        /// Flag indicating if the trip leg is partially cancelled.
        /// </summary>
        /// <value>Flag indicating if the trip leg is partially cancelled.</value>
        [DataMember(Name = "isPartCancelled", EmitDefaultValue = true)]
        public bool IsPartCancelled { get; set; }

        /// <summary>
        /// Gets or Sets Occupancy
        /// </summary>
        [DataMember(Name = "occupancy", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel Occupancy { get; set; }

        /// <summary>
        /// Index of Leg in Journey
        /// </summary>
        /// <value>Index of Leg in Journey</value>
        [DataMember(Name = "journeyLegIndex", EmitDefaultValue = false)]
        public int JourneyLegIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel {\n");
            sb.Append("  ServiceJourneys: ").Append(ServiceJourneys).Append("\n");
            sb.Append("  CallsOnTripLeg: ").Append(CallsOnTripLeg).Append("\n");
            sb.Append("  TripLegCoordinates: ").Append(TripLegCoordinates).Append("\n");
            sb.Append("  TariffZones: ").Append(TariffZones).Append("\n");
            sb.Append("  IsCancelled: ").Append(IsCancelled).Append("\n");
            sb.Append("  IsPartCancelled: ").Append(IsPartCancelled).Append("\n");
            sb.Append("  Occupancy: ").Append(Occupancy).Append("\n");
            sb.Append("  JourneyLegIndex: ").Append(JourneyLegIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ServiceJourneys == input.ServiceJourneys ||
                    this.ServiceJourneys != null &&
                    input.ServiceJourneys != null &&
                    this.ServiceJourneys.SequenceEqual(input.ServiceJourneys)
                ) && 
                (
                    this.CallsOnTripLeg == input.CallsOnTripLeg ||
                    this.CallsOnTripLeg != null &&
                    input.CallsOnTripLeg != null &&
                    this.CallsOnTripLeg.SequenceEqual(input.CallsOnTripLeg)
                ) && 
                (
                    this.TripLegCoordinates == input.TripLegCoordinates ||
                    this.TripLegCoordinates != null &&
                    input.TripLegCoordinates != null &&
                    this.TripLegCoordinates.SequenceEqual(input.TripLegCoordinates)
                ) && 
                (
                    this.TariffZones == input.TariffZones ||
                    this.TariffZones != null &&
                    input.TariffZones != null &&
                    this.TariffZones.SequenceEqual(input.TariffZones)
                ) && 
                (
                    this.IsCancelled == input.IsCancelled ||
                    this.IsCancelled.Equals(input.IsCancelled)
                ) && 
                (
                    this.IsPartCancelled == input.IsPartCancelled ||
                    this.IsPartCancelled.Equals(input.IsPartCancelled)
                ) && 
                (
                    this.Occupancy == input.Occupancy ||
                    (this.Occupancy != null &&
                    this.Occupancy.Equals(input.Occupancy))
                ) && 
                (
                    this.JourneyLegIndex == input.JourneyLegIndex ||
                    this.JourneyLegIndex.Equals(input.JourneyLegIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceJourneys != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceJourneys.GetHashCode();
                }
                if (this.CallsOnTripLeg != null)
                {
                    hashCode = (hashCode * 59) + this.CallsOnTripLeg.GetHashCode();
                }
                if (this.TripLegCoordinates != null)
                {
                    hashCode = (hashCode * 59) + this.TripLegCoordinates.GetHashCode();
                }
                if (this.TariffZones != null)
                {
                    hashCode = (hashCode * 59) + this.TariffZones.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCancelled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPartCancelled.GetHashCode();
                if (this.Occupancy != null)
                {
                    hashCode = (hashCode * 59) + this.Occupancy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JourneyLegIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
