/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.Products.TicketConfigurationApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AgeType
        /// </summary>
        [DataMember(Name = "ageType", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsAgeType? AgeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel" /> class.
        /// </summary>
        /// <param name="productId">productId.</param>
        /// <param name="validityLength">validityLength.</param>
        /// <param name="itemPrice">itemPrice.</param>
        /// <param name="offerSpecification">offerSpecification.</param>
        /// <param name="ageType">ageType.</param>
        /// <param name="zoneIds">zoneIds.</param>
        public VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel(int? productId = default(int?), int validityLength = default(int), double itemPrice = default(double), string offerSpecification = default(string), VTApiPlaneraResaWebV4ModelsAgeType? ageType = default(VTApiPlaneraResaWebV4ModelsAgeType?), List<string> zoneIds = default(List<string>))
        {
            this.ProductId = productId;
            this.ValidityLength = validityLength;
            this.ItemPrice = itemPrice;
            this.OfferSpecification = offerSpecification;
            this.AgeType = ageType;
            this.ZoneIds = zoneIds;
        }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", EmitDefaultValue = true)]
        public int? ProductId { get; set; }

        /// <summary>
        /// Gets or Sets ValidityLength
        /// </summary>
        [DataMember(Name = "validityLength", EmitDefaultValue = false)]
        public int ValidityLength { get; set; }

        /// <summary>
        /// Gets or Sets ItemPrice
        /// </summary>
        [DataMember(Name = "itemPrice", EmitDefaultValue = false)]
        public double ItemPrice { get; set; }

        /// <summary>
        /// Gets or Sets OfferSpecification
        /// </summary>
        [DataMember(Name = "offerSpecification", EmitDefaultValue = true)]
        public string OfferSpecification { get; set; }

        /// <summary>
        /// Gets or Sets ZoneIds
        /// </summary>
        [DataMember(Name = "zoneIds", EmitDefaultValue = true)]
        public List<string> ZoneIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ValidityLength: ").Append(ValidityLength).Append("\n");
            sb.Append("  ItemPrice: ").Append(ItemPrice).Append("\n");
            sb.Append("  OfferSpecification: ").Append(OfferSpecification).Append("\n");
            sb.Append("  AgeType: ").Append(AgeType).Append("\n");
            sb.Append("  ZoneIds: ").Append(ZoneIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsProductsTicketConfigurationApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ValidityLength == input.ValidityLength ||
                    this.ValidityLength.Equals(input.ValidityLength)
                ) && 
                (
                    this.ItemPrice == input.ItemPrice ||
                    this.ItemPrice.Equals(input.ItemPrice)
                ) && 
                (
                    this.OfferSpecification == input.OfferSpecification ||
                    (this.OfferSpecification != null &&
                    this.OfferSpecification.Equals(input.OfferSpecification))
                ) && 
                (
                    this.AgeType == input.AgeType ||
                    this.AgeType.Equals(input.AgeType)
                ) && 
                (
                    this.ZoneIds == input.ZoneIds ||
                    this.ZoneIds != null &&
                    input.ZoneIds != null &&
                    this.ZoneIds.SequenceEqual(input.ZoneIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ValidityLength.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemPrice.GetHashCode();
                if (this.OfferSpecification != null)
                {
                    hashCode = (hashCode * 59) + this.OfferSpecification.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AgeType.GetHashCode();
                if (this.ZoneIds != null)
                {
                    hashCode = (hashCode * 59) + this.ZoneIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
