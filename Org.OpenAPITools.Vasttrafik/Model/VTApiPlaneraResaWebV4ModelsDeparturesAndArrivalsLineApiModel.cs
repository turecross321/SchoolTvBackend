/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about a line of a departure or arrival service journey.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.DeparturesAndArrivals.LineApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransportMode
        /// </summary>
        [DataMember(Name = "transportMode", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsTransportMode? TransportMode { get; set; }

        /// <summary>
        /// Gets or Sets TransportSubMode
        /// </summary>
        [DataMember(Name = "transportSubMode", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsTransportSubMode? TransportSubMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel" /> class.
        /// </summary>
        /// <param name="gid">16-digit Västtrafik line gid..</param>
        /// <param name="name">The line name..</param>
        /// <param name="shortName">The short name of the line, usually 5 characters or less..</param>
        /// <param name="designation">The designation of the line..</param>
        /// <param name="backgroundColor">The background color of the line symbol..</param>
        /// <param name="foregroundColor">The foreground color of the line symbol..</param>
        /// <param name="borderColor">The border color of the line symbol..</param>
        /// <param name="transportMode">transportMode.</param>
        /// <param name="transportSubMode">transportSubMode.</param>
        /// <param name="isWheelchairAccessible">Flag indicating if the line is wheelchair accessible..</param>
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel(string gid = default(string), string name = default(string), string shortName = default(string), string designation = default(string), string backgroundColor = default(string), string foregroundColor = default(string), string borderColor = default(string), VTApiPlaneraResaWebV4ModelsTransportMode? transportMode = default(VTApiPlaneraResaWebV4ModelsTransportMode?), VTApiPlaneraResaWebV4ModelsTransportSubMode? transportSubMode = default(VTApiPlaneraResaWebV4ModelsTransportSubMode?), bool isWheelchairAccessible = default(bool))
        {
            this.Gid = gid;
            this.Name = name;
            this.ShortName = shortName;
            this.Designation = designation;
            this.BackgroundColor = backgroundColor;
            this.ForegroundColor = foregroundColor;
            this.BorderColor = borderColor;
            this.TransportMode = transportMode;
            this.TransportSubMode = transportSubMode;
            this.IsWheelchairAccessible = isWheelchairAccessible;
        }

        /// <summary>
        /// 16-digit Västtrafik line gid.
        /// </summary>
        /// <value>16-digit Västtrafik line gid.</value>
        [DataMember(Name = "gid", EmitDefaultValue = true)]
        public string Gid { get; set; }

        /// <summary>
        /// The line name.
        /// </summary>
        /// <value>The line name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The short name of the line, usually 5 characters or less.
        /// </summary>
        /// <value>The short name of the line, usually 5 characters or less.</value>
        [DataMember(Name = "shortName", EmitDefaultValue = true)]
        public string ShortName { get; set; }

        /// <summary>
        /// The designation of the line.
        /// </summary>
        /// <value>The designation of the line.</value>
        [DataMember(Name = "designation", EmitDefaultValue = true)]
        public string Designation { get; set; }

        /// <summary>
        /// The background color of the line symbol.
        /// </summary>
        /// <value>The background color of the line symbol.</value>
        [DataMember(Name = "backgroundColor", EmitDefaultValue = true)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// The foreground color of the line symbol.
        /// </summary>
        /// <value>The foreground color of the line symbol.</value>
        [DataMember(Name = "foregroundColor", EmitDefaultValue = true)]
        public string ForegroundColor { get; set; }

        /// <summary>
        /// The border color of the line symbol.
        /// </summary>
        /// <value>The border color of the line symbol.</value>
        [DataMember(Name = "borderColor", EmitDefaultValue = true)]
        public string BorderColor { get; set; }

        /// <summary>
        /// Flag indicating if the line is wheelchair accessible.
        /// </summary>
        /// <value>Flag indicating if the line is wheelchair accessible.</value>
        [DataMember(Name = "isWheelchairAccessible", EmitDefaultValue = true)]
        public bool IsWheelchairAccessible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Designation: ").Append(Designation).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ForegroundColor: ").Append(ForegroundColor).Append("\n");
            sb.Append("  BorderColor: ").Append(BorderColor).Append("\n");
            sb.Append("  TransportMode: ").Append(TransportMode).Append("\n");
            sb.Append("  TransportSubMode: ").Append(TransportSubMode).Append("\n");
            sb.Append("  IsWheelchairAccessible: ").Append(IsWheelchairAccessible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Gid == input.Gid ||
                    (this.Gid != null &&
                    this.Gid.Equals(input.Gid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Designation == input.Designation ||
                    (this.Designation != null &&
                    this.Designation.Equals(input.Designation))
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.ForegroundColor == input.ForegroundColor ||
                    (this.ForegroundColor != null &&
                    this.ForegroundColor.Equals(input.ForegroundColor))
                ) && 
                (
                    this.BorderColor == input.BorderColor ||
                    (this.BorderColor != null &&
                    this.BorderColor.Equals(input.BorderColor))
                ) && 
                (
                    this.TransportMode == input.TransportMode ||
                    this.TransportMode.Equals(input.TransportMode)
                ) && 
                (
                    this.TransportSubMode == input.TransportSubMode ||
                    this.TransportSubMode.Equals(input.TransportSubMode)
                ) && 
                (
                    this.IsWheelchairAccessible == input.IsWheelchairAccessible ||
                    this.IsWheelchairAccessible.Equals(input.IsWheelchairAccessible)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gid != null)
                {
                    hashCode = (hashCode * 59) + this.Gid.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.Designation != null)
                {
                    hashCode = (hashCode * 59) + this.Designation.GetHashCode();
                }
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                if (this.ForegroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.ForegroundColor.GetHashCode();
                }
                if (this.BorderColor != null)
                {
                    hashCode = (hashCode * 59) + this.BorderColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransportMode.GetHashCode();
                hashCode = (hashCode * 59) + this.TransportSubMode.GetHashCode();
                hashCode = (hashCode * 59) + this.IsWheelchairAccessible.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
