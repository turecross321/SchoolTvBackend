/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a segment of a departure access link, arrival access link or destination link.
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.Journeys.LinkSegmentApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Maneuver
        /// </summary>
        [DataMember(Name = "maneuver", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsLinkSegmentManeuver? Maneuver { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name = "orientation", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsLinkSegmentOrientation? Orientation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel" /> class.
        /// </summary>
        /// <param name="name">Segment name..</param>
        /// <param name="maneuver">maneuver.</param>
        /// <param name="orientation">orientation.</param>
        /// <param name="maneuverDescription">Description for the maneuver..</param>
        /// <param name="distanceInMeters">Distance for this segment in meter..</param>
        public VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel(string name = default(string), VTApiPlaneraResaWebV4ModelsLinkSegmentManeuver? maneuver = default(VTApiPlaneraResaWebV4ModelsLinkSegmentManeuver?), VTApiPlaneraResaWebV4ModelsLinkSegmentOrientation? orientation = default(VTApiPlaneraResaWebV4ModelsLinkSegmentOrientation?), string maneuverDescription = default(string), int? distanceInMeters = default(int?))
        {
            this.Name = name;
            this.Maneuver = maneuver;
            this.Orientation = orientation;
            this.ManeuverDescription = maneuverDescription;
            this.DistanceInMeters = distanceInMeters;
        }

        /// <summary>
        /// Segment name.
        /// </summary>
        /// <value>Segment name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Description for the maneuver.
        /// </summary>
        /// <value>Description for the maneuver.</value>
        [DataMember(Name = "maneuverDescription", EmitDefaultValue = true)]
        public string ManeuverDescription { get; set; }

        /// <summary>
        /// Distance for this segment in meter.
        /// </summary>
        /// <value>Distance for this segment in meter.</value>
        [DataMember(Name = "distanceInMeters", EmitDefaultValue = true)]
        public int? DistanceInMeters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Maneuver: ").Append(Maneuver).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  ManeuverDescription: ").Append(ManeuverDescription).Append("\n");
            sb.Append("  DistanceInMeters: ").Append(DistanceInMeters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsJourneysLinkSegmentApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Maneuver == input.Maneuver ||
                    this.Maneuver.Equals(input.Maneuver)
                ) && 
                (
                    this.Orientation == input.Orientation ||
                    this.Orientation.Equals(input.Orientation)
                ) && 
                (
                    this.ManeuverDescription == input.ManeuverDescription ||
                    (this.ManeuverDescription != null &&
                    this.ManeuverDescription.Equals(input.ManeuverDescription))
                ) && 
                (
                    this.DistanceInMeters == input.DistanceInMeters ||
                    (this.DistanceInMeters != null &&
                    this.DistanceInMeters.Equals(input.DistanceInMeters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Maneuver.GetHashCode();
                hashCode = (hashCode * 59) + this.Orientation.GetHashCode();
                if (this.ManeuverDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ManeuverDescription.GetHashCode();
                }
                if (this.DistanceInMeters != null)
                {
                    hashCode = (hashCode * 59) + this.DistanceInMeters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
