/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about the coordinates
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.CoordinateApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsCoordinateApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsCoordinateApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsCoordinateApiModel" /> class.
        /// </summary>
        /// <param name="latitude">The latitude of this position (WGS84)..</param>
        /// <param name="longitude">The longitude of this position (WGS84)..</param>
        /// <param name="elevation">The elevation of this position (WGS84)..</param>
        /// <param name="isOnTripLeg">The coordinate is on the tripleg..</param>
        /// <param name="isTripLegStart">The coordinate is on the first call of the leg..</param>
        /// <param name="isTripLegStop">The coordinate is on the last call of the leg..</param>
        public VTApiPlaneraResaWebV4ModelsCoordinateApiModel(double latitude = default(double), double longitude = default(double), double? elevation = default(double?), bool? isOnTripLeg = default(bool?), bool? isTripLegStart = default(bool?), bool? isTripLegStop = default(bool?))
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Elevation = elevation;
            this.IsOnTripLeg = isOnTripLeg;
            this.IsTripLegStart = isTripLegStart;
            this.IsTripLegStop = isTripLegStop;
        }

        /// <summary>
        /// The latitude of this position (WGS84).
        /// </summary>
        /// <value>The latitude of this position (WGS84).</value>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public double Latitude { get; set; }

        /// <summary>
        /// The longitude of this position (WGS84).
        /// </summary>
        /// <value>The longitude of this position (WGS84).</value>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public double Longitude { get; set; }

        /// <summary>
        /// The elevation of this position (WGS84).
        /// </summary>
        /// <value>The elevation of this position (WGS84).</value>
        [DataMember(Name = "elevation", EmitDefaultValue = true)]
        public double? Elevation { get; set; }

        /// <summary>
        /// The coordinate is on the tripleg.
        /// </summary>
        /// <value>The coordinate is on the tripleg.</value>
        [DataMember(Name = "isOnTripLeg", EmitDefaultValue = true)]
        public bool? IsOnTripLeg { get; set; }

        /// <summary>
        /// The coordinate is on the first call of the leg.
        /// </summary>
        /// <value>The coordinate is on the first call of the leg.</value>
        [DataMember(Name = "isTripLegStart", EmitDefaultValue = true)]
        public bool? IsTripLegStart { get; set; }

        /// <summary>
        /// The coordinate is on the last call of the leg.
        /// </summary>
        /// <value>The coordinate is on the last call of the leg.</value>
        [DataMember(Name = "isTripLegStop", EmitDefaultValue = true)]
        public bool? IsTripLegStop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsCoordinateApiModel {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Elevation: ").Append(Elevation).Append("\n");
            sb.Append("  IsOnTripLeg: ").Append(IsOnTripLeg).Append("\n");
            sb.Append("  IsTripLegStart: ").Append(IsTripLegStart).Append("\n");
            sb.Append("  IsTripLegStop: ").Append(IsTripLegStop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsCoordinateApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsCoordinateApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsCoordinateApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsCoordinateApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Elevation == input.Elevation ||
                    (this.Elevation != null &&
                    this.Elevation.Equals(input.Elevation))
                ) && 
                (
                    this.IsOnTripLeg == input.IsOnTripLeg ||
                    (this.IsOnTripLeg != null &&
                    this.IsOnTripLeg.Equals(input.IsOnTripLeg))
                ) && 
                (
                    this.IsTripLegStart == input.IsTripLegStart ||
                    (this.IsTripLegStart != null &&
                    this.IsTripLegStart.Equals(input.IsTripLegStart))
                ) && 
                (
                    this.IsTripLegStop == input.IsTripLegStop ||
                    (this.IsTripLegStop != null &&
                    this.IsTripLegStop.Equals(input.IsTripLegStop))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                if (this.Elevation != null)
                {
                    hashCode = (hashCode * 59) + this.Elevation.GetHashCode();
                }
                if (this.IsOnTripLeg != null)
                {
                    hashCode = (hashCode * 59) + this.IsOnTripLeg.GetHashCode();
                }
                if (this.IsTripLegStart != null)
                {
                    hashCode = (hashCode * 59) + this.IsTripLegStart.GetHashCode();
                }
                if (this.IsTripLegStop != null)
                {
                    hashCode = (hashCode * 59) + this.IsTripLegStop.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
