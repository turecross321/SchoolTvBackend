/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel
    /// </summary>
    [DataContract(Name = "VT.ApiPlaneraResa.Web.V4.Models.DeparturesAndArrivals.ArrivalApiModel")]
    public partial class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel : IEquatable<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel" /> class.
        /// </summary>
        /// <param name="detailsReference">A reference that should be used when getting detailed information about the journey..</param>
        /// <param name="serviceJourney">serviceJourney.</param>
        /// <param name="stopPoint">stopPoint (required).</param>
        /// <param name="plannedTime">The planned time of the call in RFC 3339 format. (required).</param>
        /// <param name="estimatedTime">The estimated time of the call in RFC 3339 format..</param>
        /// <param name="isCancelled">Flag indicating if the departure or arrival is cancelled..</param>
        /// <param name="isPartCancelled">Flag indicating if the departure or arrival is partially cancelled..</param>
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel(string detailsReference = default(string), VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel serviceJourney = default(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel), VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel stopPoint = default(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel), string plannedTime = default(string), string estimatedTime = default(string), bool isCancelled = default(bool), bool isPartCancelled = default(bool))
        {
            // to ensure "stopPoint" is required (not null)
            if (stopPoint == null)
            {
                throw new ArgumentNullException("stopPoint is a required property for VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel and cannot be null");
            }
            this.StopPoint = stopPoint;
            // to ensure "plannedTime" is required (not null)
            if (plannedTime == null)
            {
                throw new ArgumentNullException("plannedTime is a required property for VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel and cannot be null");
            }
            this.PlannedTime = plannedTime;
            this.DetailsReference = detailsReference;
            this.ServiceJourney = serviceJourney;
            this.EstimatedTime = estimatedTime;
            this.IsCancelled = isCancelled;
            this.IsPartCancelled = isPartCancelled;
        }

        /// <summary>
        /// A reference that should be used when getting detailed information about the journey.
        /// </summary>
        /// <value>A reference that should be used when getting detailed information about the journey.</value>
        [DataMember(Name = "detailsReference", EmitDefaultValue = true)]
        public string DetailsReference { get; set; }

        /// <summary>
        /// Gets or Sets ServiceJourney
        /// </summary>
        [DataMember(Name = "serviceJourney", EmitDefaultValue = false)]
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel ServiceJourney { get; set; }

        /// <summary>
        /// Gets or Sets StopPoint
        /// </summary>
        [DataMember(Name = "stopPoint", IsRequired = true, EmitDefaultValue = true)]
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel StopPoint { get; set; }

        /// <summary>
        /// The planned time of the call in RFC 3339 format.
        /// </summary>
        /// <value>The planned time of the call in RFC 3339 format.</value>
        [DataMember(Name = "plannedTime", IsRequired = true, EmitDefaultValue = true)]
        public string PlannedTime { get; set; }

        /// <summary>
        /// The estimated time of the call in RFC 3339 format.
        /// </summary>
        /// <value>The estimated time of the call in RFC 3339 format.</value>
        [DataMember(Name = "estimatedTime", EmitDefaultValue = true)]
        public string EstimatedTime { get; set; }

        /// <summary>
        /// The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.
        /// </summary>
        /// <value>The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.</value>
        [DataMember(Name = "estimatedOtherwisePlannedTime", EmitDefaultValue = true)]
        public string EstimatedOtherwisePlannedTime { get; private set; }

        /// <summary>
        /// Returns false as EstimatedOtherwisePlannedTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEstimatedOtherwisePlannedTime()
        {
            return false;
        }
        /// <summary>
        /// Flag indicating if the departure or arrival is cancelled.
        /// </summary>
        /// <value>Flag indicating if the departure or arrival is cancelled.</value>
        [DataMember(Name = "isCancelled", EmitDefaultValue = true)]
        public bool IsCancelled { get; set; }

        /// <summary>
        /// Flag indicating if the departure or arrival is partially cancelled.
        /// </summary>
        /// <value>Flag indicating if the departure or arrival is partially cancelled.</value>
        [DataMember(Name = "isPartCancelled", EmitDefaultValue = true)]
        public bool IsPartCancelled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel {\n");
            sb.Append("  DetailsReference: ").Append(DetailsReference).Append("\n");
            sb.Append("  ServiceJourney: ").Append(ServiceJourney).Append("\n");
            sb.Append("  StopPoint: ").Append(StopPoint).Append("\n");
            sb.Append("  PlannedTime: ").Append(PlannedTime).Append("\n");
            sb.Append("  EstimatedTime: ").Append(EstimatedTime).Append("\n");
            sb.Append("  EstimatedOtherwisePlannedTime: ").Append(EstimatedOtherwisePlannedTime).Append("\n");
            sb.Append("  IsCancelled: ").Append(IsCancelled).Append("\n");
            sb.Append("  IsPartCancelled: ").Append(IsPartCancelled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel);
        }

        /// <summary>
        /// Returns true if VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DetailsReference == input.DetailsReference ||
                    (this.DetailsReference != null &&
                    this.DetailsReference.Equals(input.DetailsReference))
                ) && 
                (
                    this.ServiceJourney == input.ServiceJourney ||
                    (this.ServiceJourney != null &&
                    this.ServiceJourney.Equals(input.ServiceJourney))
                ) && 
                (
                    this.StopPoint == input.StopPoint ||
                    (this.StopPoint != null &&
                    this.StopPoint.Equals(input.StopPoint))
                ) && 
                (
                    this.PlannedTime == input.PlannedTime ||
                    (this.PlannedTime != null &&
                    this.PlannedTime.Equals(input.PlannedTime))
                ) && 
                (
                    this.EstimatedTime == input.EstimatedTime ||
                    (this.EstimatedTime != null &&
                    this.EstimatedTime.Equals(input.EstimatedTime))
                ) && 
                (
                    this.EstimatedOtherwisePlannedTime == input.EstimatedOtherwisePlannedTime ||
                    (this.EstimatedOtherwisePlannedTime != null &&
                    this.EstimatedOtherwisePlannedTime.Equals(input.EstimatedOtherwisePlannedTime))
                ) && 
                (
                    this.IsCancelled == input.IsCancelled ||
                    this.IsCancelled.Equals(input.IsCancelled)
                ) && 
                (
                    this.IsPartCancelled == input.IsPartCancelled ||
                    this.IsPartCancelled.Equals(input.IsPartCancelled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DetailsReference != null)
                {
                    hashCode = (hashCode * 59) + this.DetailsReference.GetHashCode();
                }
                if (this.ServiceJourney != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceJourney.GetHashCode();
                }
                if (this.StopPoint != null)
                {
                    hashCode = (hashCode * 59) + this.StopPoint.GetHashCode();
                }
                if (this.PlannedTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedTime.GetHashCode();
                }
                if (this.EstimatedTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedTime.GetHashCode();
                }
                if (this.EstimatedOtherwisePlannedTime != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedOtherwisePlannedTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCancelled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPartCancelled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PlannedTime (string) minLength
            if (this.PlannedTime != null && this.PlannedTime.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlannedTime, length must be greater than 1.", new [] { "PlannedTime" });
            }

            yield break;
        }
    }

}
