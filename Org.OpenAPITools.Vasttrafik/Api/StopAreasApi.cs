/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStopAreasApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all stop areas.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel&gt;</returns>
        List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel> StopAreasGet(string? ifNoneMatch = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns all stop areas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel&gt;</returns>
        ApiResponse<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>> StopAreasGetWithHttpInfo(string? ifNoneMatch = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns details about an arrival.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel</returns>
        VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>?), int operationIndex = 0);

        /// <summary>
        /// Returns details about an arrival.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel> StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetWithHttpInfo(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>?), int operationIndex = 0);
        /// <summary>
        /// Returns arrivals to the specified stop area at the specified time.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014003980000/arrivals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxArrivalsPerLineAndDirection">The maximum number of arrivals for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse</returns>
        VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse StopAreasStopAreaGidArrivalsGet(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxArrivalsPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), string? directionGid = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns arrivals to the specified stop area at the specified time.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014003980000/arrivals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxArrivalsPerLineAndDirection">The maximum number of arrivals for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse> StopAreasStopAreaGidArrivalsGetWithHttpInfo(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxArrivalsPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), string? directionGid = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns details about a departure.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel</returns>
        VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>?), int operationIndex = 0);

        /// <summary>
        /// Returns details about a departure.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel> StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetWithHttpInfo(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>?), int operationIndex = 0);
        /// <summary>
        /// Returns departures from the specified stop area at the specified time.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014003980000/departures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxDeparturesPerLineAndDirection">The maximum number of departures for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="includeOccupancy">Includes occupancy in departure. (optional, default to false)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse</returns>
        VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse StopAreasStopAreaGidDeparturesGet(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxDeparturesPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), bool? includeOccupancy = default(bool?), string? directionGid = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns departures from the specified stop area at the specified time.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014003980000/departures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxDeparturesPerLineAndDirection">The maximum number of departures for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="includeOccupancy">Includes occupancy in departure. (optional, default to false)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse> StopAreasStopAreaGidDeparturesGetWithHttpInfo(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxDeparturesPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), bool? includeOccupancy = default(bool?), string? directionGid = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStopAreasApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns all stop areas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel&gt;</returns>
        System.Threading.Tasks.Task<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>> StopAreasGetAsync(string? ifNoneMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all stop areas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>>> StopAreasGetWithHttpInfoAsync(string? ifNoneMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns details about an arrival.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel> StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetAsync(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns details about an arrival.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel>> StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetWithHttpInfoAsync(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns arrivals to the specified stop area at the specified time.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014003980000/arrivals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxArrivalsPerLineAndDirection">The maximum number of arrivals for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse> StopAreasStopAreaGidArrivalsGetAsync(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxArrivalsPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), string? directionGid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns arrivals to the specified stop area at the specified time.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014003980000/arrivals
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxArrivalsPerLineAndDirection">The maximum number of arrivals for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse>> StopAreasStopAreaGidArrivalsGetWithHttpInfoAsync(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxArrivalsPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), string? directionGid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns details about a departure.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel> StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetAsync(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns details about a departure.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel>> StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetWithHttpInfoAsync(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns departures from the specified stop area at the specified time.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014003980000/departures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxDeparturesPerLineAndDirection">The maximum number of departures for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="includeOccupancy">Includes occupancy in departure. (optional, default to false)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse> StopAreasStopAreaGidDeparturesGetAsync(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxDeparturesPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), bool? includeOccupancy = default(bool?), string? directionGid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns departures from the specified stop area at the specified time.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /stop-areas/9021014003980000/departures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxDeparturesPerLineAndDirection">The maximum number of departures for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="includeOccupancy">Includes occupancy in departure. (optional, default to false)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse>> StopAreasStopAreaGidDeparturesGetWithHttpInfoAsync(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxDeparturesPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), bool? includeOccupancy = default(bool?), string? directionGid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStopAreasApi : IStopAreasApiSync, IStopAreasApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StopAreasApi : IStopAreasApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StopAreasApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StopAreasApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StopAreasApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StopAreasApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StopAreasApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StopAreasApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StopAreasApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StopAreasApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns all stop areas. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel&gt;</returns>
        public List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel> StopAreasGet(string? ifNoneMatch = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>> localVarResponse = StopAreasGetWithHttpInfo(ifNoneMatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all stop areas. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>> StopAreasGetWithHttpInfo(string? ifNoneMatch = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>>("/stop-areas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all stop areas. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>> StopAreasGetAsync(string? ifNoneMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>> localVarResponse = await StopAreasGetWithHttpInfoAsync(ifNoneMatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all stop areas. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>>> StopAreasGetWithHttpInfoAsync(string? ifNoneMatch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>>("/stop-areas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about an arrival. Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel</returns>
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel> localVarResponse = StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetWithHttpInfo(detailsReference, stopAreaGid, includes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about an arrival. Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel> StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetWithHttpInfo(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>?), int operationIndex = 0)
        {
            // verify the required parameter 'detailsReference' is set
            if (detailsReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'detailsReference' when calling StopAreasApi->StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet");
            }

            // verify the required parameter 'stopAreaGid' is set
            if (stopAreaGid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stopAreaGid' when calling StopAreasApi->StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("detailsReference", Org.OpenAPITools.Client.ClientUtils.ParameterToString(detailsReference)); // path parameter
            localVarRequestOptions.PathParameters.Add("stopAreaGid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stopAreaGid)); // path parameter
            if (includes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "includes", includes));
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel>("/stop-areas/{stopAreaGid}/arrivals/{detailsReference}/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about an arrival. Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel> StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetAsync(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel> localVarResponse = await StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetWithHttpInfoAsync(detailsReference, stopAreaGid, includes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about an arrival. Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel>> StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetWithHttpInfoAsync(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'detailsReference' is set
            if (detailsReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'detailsReference' when calling StopAreasApi->StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet");
            }

            // verify the required parameter 'stopAreaGid' is set
            if (stopAreaGid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stopAreaGid' when calling StopAreasApi->StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("detailsReference", Org.OpenAPITools.Client.ClientUtils.ParameterToString(detailsReference)); // path parameter
            localVarRequestOptions.PathParameters.Add("stopAreaGid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stopAreaGid)); // path parameter
            if (includes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "includes", includes));
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel>("/stop-areas/{stopAreaGid}/arrivals/{detailsReference}/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns arrivals to the specified stop area at the specified time. Sample request:                    GET /stop-areas/9021014003980000/arrivals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxArrivalsPerLineAndDirection">The maximum number of arrivals for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse</returns>
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse StopAreasStopAreaGidArrivalsGet(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxArrivalsPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), string? directionGid = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse> localVarResponse = StopAreasStopAreaGidArrivalsGetWithHttpInfo(stopAreaGid, startDateTime, platforms, timeSpanInMinutes, maxArrivalsPerLineAndDirection, limit, offset, directionGid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns arrivals to the specified stop area at the specified time. Sample request:                    GET /stop-areas/9021014003980000/arrivals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxArrivalsPerLineAndDirection">The maximum number of arrivals for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse> StopAreasStopAreaGidArrivalsGetWithHttpInfo(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxArrivalsPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), string? directionGid = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'stopAreaGid' is set
            if (stopAreaGid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stopAreaGid' when calling StopAreasApi->StopAreasStopAreaGidArrivalsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stopAreaGid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stopAreaGid)); // path parameter
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (platforms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "platforms", platforms));
            }
            if (timeSpanInMinutes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeSpanInMinutes", timeSpanInMinutes));
            }
            if (maxArrivalsPerLineAndDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxArrivalsPerLineAndDirection", maxArrivalsPerLineAndDirection));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (directionGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "directionGid", directionGid));
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasStopAreaGidArrivalsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse>("/stop-areas/{stopAreaGid}/arrivals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasStopAreaGidArrivalsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns arrivals to the specified stop area at the specified time. Sample request:                    GET /stop-areas/9021014003980000/arrivals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxArrivalsPerLineAndDirection">The maximum number of arrivals for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse> StopAreasStopAreaGidArrivalsGetAsync(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxArrivalsPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), string? directionGid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse> localVarResponse = await StopAreasStopAreaGidArrivalsGetWithHttpInfoAsync(stopAreaGid, startDateTime, platforms, timeSpanInMinutes, maxArrivalsPerLineAndDirection, limit, offset, directionGid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns arrivals to the specified stop area at the specified time. Sample request:                    GET /stop-areas/9021014003980000/arrivals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxArrivalsPerLineAndDirection">The maximum number of arrivals for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse>> StopAreasStopAreaGidArrivalsGetWithHttpInfoAsync(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxArrivalsPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), string? directionGid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stopAreaGid' is set
            if (stopAreaGid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stopAreaGid' when calling StopAreasApi->StopAreasStopAreaGidArrivalsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stopAreaGid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stopAreaGid)); // path parameter
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (platforms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "platforms", platforms));
            }
            if (timeSpanInMinutes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeSpanInMinutes", timeSpanInMinutes));
            }
            if (maxArrivalsPerLineAndDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxArrivalsPerLineAndDirection", maxArrivalsPerLineAndDirection));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (directionGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "directionGid", directionGid));
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasStopAreaGidArrivalsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse>("/stop-areas/{stopAreaGid}/arrivals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasStopAreaGidArrivalsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a departure. Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel</returns>
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel> localVarResponse = StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetWithHttpInfo(detailsReference, stopAreaGid, includes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a departure. Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel> StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetWithHttpInfo(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>?), int operationIndex = 0)
        {
            // verify the required parameter 'detailsReference' is set
            if (detailsReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'detailsReference' when calling StopAreasApi->StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet");
            }

            // verify the required parameter 'stopAreaGid' is set
            if (stopAreaGid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stopAreaGid' when calling StopAreasApi->StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("detailsReference", Org.OpenAPITools.Client.ClientUtils.ParameterToString(detailsReference)); // path parameter
            localVarRequestOptions.PathParameters.Add("stopAreaGid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stopAreaGid)); // path parameter
            if (includes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "includes", includes));
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel>("/stop-areas/{stopAreaGid}/departures/{detailsReference}/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a departure. Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel> StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetAsync(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel> localVarResponse = await StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetWithHttpInfoAsync(detailsReference, stopAreaGid, includes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a departure. Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes&#x3D;servicejourneycalls
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="stopAreaGid"></param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel>> StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetWithHttpInfoAsync(string detailsReference, string stopAreaGid, List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'detailsReference' is set
            if (detailsReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'detailsReference' when calling StopAreasApi->StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet");
            }

            // verify the required parameter 'stopAreaGid' is set
            if (stopAreaGid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stopAreaGid' when calling StopAreasApi->StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("detailsReference", Org.OpenAPITools.Client.ClientUtils.ParameterToString(detailsReference)); // path parameter
            localVarRequestOptions.PathParameters.Add("stopAreaGid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stopAreaGid)); // path parameter
            if (includes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "includes", includes));
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel>("/stop-areas/{stopAreaGid}/departures/{detailsReference}/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns departures from the specified stop area at the specified time. Sample request:                    GET /stop-areas/9021014003980000/departures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxDeparturesPerLineAndDirection">The maximum number of departures for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="includeOccupancy">Includes occupancy in departure. (optional, default to false)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse</returns>
        public VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse StopAreasStopAreaGidDeparturesGet(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxDeparturesPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), bool? includeOccupancy = default(bool?), string? directionGid = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse> localVarResponse = StopAreasStopAreaGidDeparturesGetWithHttpInfo(stopAreaGid, startDateTime, platforms, timeSpanInMinutes, maxDeparturesPerLineAndDirection, limit, offset, includeOccupancy, directionGid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns departures from the specified stop area at the specified time. Sample request:                    GET /stop-areas/9021014003980000/departures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxDeparturesPerLineAndDirection">The maximum number of departures for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="includeOccupancy">Includes occupancy in departure. (optional, default to false)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse> StopAreasStopAreaGidDeparturesGetWithHttpInfo(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxDeparturesPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), bool? includeOccupancy = default(bool?), string? directionGid = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'stopAreaGid' is set
            if (stopAreaGid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stopAreaGid' when calling StopAreasApi->StopAreasStopAreaGidDeparturesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stopAreaGid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stopAreaGid)); // path parameter
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (platforms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "platforms", platforms));
            }
            if (timeSpanInMinutes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeSpanInMinutes", timeSpanInMinutes));
            }
            if (maxDeparturesPerLineAndDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxDeparturesPerLineAndDirection", maxDeparturesPerLineAndDirection));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (includeOccupancy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeOccupancy", includeOccupancy));
            }
            if (directionGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "directionGid", directionGid));
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasStopAreaGidDeparturesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse>("/stop-areas/{stopAreaGid}/departures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasStopAreaGidDeparturesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns departures from the specified stop area at the specified time. Sample request:                    GET /stop-areas/9021014003980000/departures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxDeparturesPerLineAndDirection">The maximum number of departures for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="includeOccupancy">Includes occupancy in departure. (optional, default to false)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse> StopAreasStopAreaGidDeparturesGetAsync(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxDeparturesPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), bool? includeOccupancy = default(bool?), string? directionGid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse> localVarResponse = await StopAreasStopAreaGidDeparturesGetWithHttpInfoAsync(stopAreaGid, startDateTime, platforms, timeSpanInMinutes, maxDeparturesPerLineAndDirection, limit, offset, includeOccupancy, directionGid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns departures from the specified stop area at the specified time. Sample request:                    GET /stop-areas/9021014003980000/departures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAreaGid">The 16-digit Västtrafik gid of the stop area.</param>
        /// <param name="startDateTime">The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. (optional)</param>
        /// <param name="platforms">Filter results by platform. Multiple platforms are separated by comma. Case sensitive. (optional)</param>
        /// <param name="timeSpanInMinutes">The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440. (optional, default to 60)</param>
        /// <param name="maxDeparturesPerLineAndDirection">The maximum number of departures for a single line in a specific direction. (optional, default to 2)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="includeOccupancy">Includes occupancy in departure. (optional, default to false)</param>
        /// <param name="directionGid">Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse>> StopAreasStopAreaGidDeparturesGetWithHttpInfoAsync(string stopAreaGid, DateTime? startDateTime = default(DateTime?), string? platforms = default(string?), int? timeSpanInMinutes = default(int?), int? maxDeparturesPerLineAndDirection = default(int?), int? limit = default(int?), int? offset = default(int?), bool? includeOccupancy = default(bool?), string? directionGid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stopAreaGid' is set
            if (stopAreaGid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'stopAreaGid' when calling StopAreasApi->StopAreasStopAreaGidDeparturesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stopAreaGid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(stopAreaGid)); // path parameter
            if (startDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            }
            if (platforms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "platforms", platforms));
            }
            if (timeSpanInMinutes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeSpanInMinutes", timeSpanInMinutes));
            }
            if (maxDeparturesPerLineAndDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxDeparturesPerLineAndDirection", maxDeparturesPerLineAndDirection));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (includeOccupancy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeOccupancy", includeOccupancy));
            }
            if (directionGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "directionGid", directionGid));
            }

            localVarRequestOptions.Operation = "StopAreasApi.StopAreasStopAreaGidDeparturesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse>("/stop-areas/{stopAreaGid}/departures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopAreasStopAreaGidDeparturesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
