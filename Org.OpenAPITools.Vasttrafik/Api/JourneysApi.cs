/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJourneysApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns details about a journey.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /journeys/{detailsReference}/details?includes&#x3D;ticketsuggestions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="channelIds">List of channel ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="productTypes">List of product type ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="travellerCategories">List of traveller category ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel</returns>
        VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel JourneysDetailsReferenceDetailsGet(string detailsReference, List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>?), List<int>? channelIds = default(List<int>?), List<int>? productTypes = default(List<int>?), List<VTApiPlaneraResaWebV4ModelsTravellerCategory>? travellerCategories = default(List<VTApiPlaneraResaWebV4ModelsTravellerCategory>?), int operationIndex = 0);

        /// <summary>
        /// Returns details about a journey.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /journeys/{detailsReference}/details?includes&#x3D;ticketsuggestions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="channelIds">List of channel ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="productTypes">List of product type ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="travellerCategories">List of traveller category ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel> JourneysDetailsReferenceDetailsGetWithHttpInfo(string detailsReference, List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>?), List<int>? channelIds = default(List<int>?), List<int>? productTypes = default(List<int>?), List<VTApiPlaneraResaWebV4ModelsTravellerCategory>? travellerCategories = default(List<VTApiPlaneraResaWebV4ModelsTravellerCategory>?), int operationIndex = 0);
        /// <summary>
        /// Returns journeys matching the specified search parameters.
        /// </summary>
        /// <remarks>
        /// For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.                Sample request:                    GET /journeys?originGid&#x3D;9021014001760000&amp;destinationGid&#x3D;9021014003980000                or                    GET /journeys?originName&#x3D;Sadelsten,+V%C3%A5rg%C3%A5rda&amp;originLongitude&#x3D;12.63308&amp;originLatitude&#x3D;58.028237&amp;destinationLongitude&#x3D;11.930897&amp;destinationLatitude&#x3D;57.586085&amp;destinationName&#x3D;%C3%85sdammsstigen,+427+36+Billdal
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originGid">The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. &#39;9021014001760000&#39;), a stop point (e.g. &#39;9022014001760004&#39;) or meta-station (e.g. &#39;0000000800000022&#39;)). (optional)</param>
        /// <param name="originName">The name of the origin location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="originLatitude">The latitude of the origin location. (optional)</param>
        /// <param name="originLongitude">The longitude of the origin location. (optional)</param>
        /// <param name="destinationGid">The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station). (optional)</param>
        /// <param name="destinationName">The name of the destination location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="destinationLatitude">The latitude of the destination location. (optional)</param>
        /// <param name="destinationLongitude">The longitude of the destination location. (optional)</param>
        /// <param name="dateTime">The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure. (optional)</param>
        /// <param name="dateTimeRelatesTo">Specifies if the datetime is related to the departure or arrival of the journey. (optional)</param>
        /// <param name="paginationReference">Pagination reference from a previous search. (optional)</param>
        /// <param name="limit">The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results. (optional, default to 10)</param>
        /// <param name="transportModes">The transport modes to include when searching for journeys, if none specified all transport modes are included. (optional)</param>
        /// <param name="transportSubModes">The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode &#39;train&#39;. (optional)</param>
        /// <param name="onlyDirectConnections">Only include direct connections, e.g. journeys with one trip leg. (optional, default to false)</param>
        /// <param name="includeNearbyStopAreas">Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area. (optional, default to false)</param>
        /// <param name="viaGid">The 16-digit Västtrafik gid of the via location (which must be a stop area). (optional)</param>
        /// <param name="originWalk">Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="destWalk">Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="originBike">Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="destBike">Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="totalBike">Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike&#x3D;1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters). (optional)</param>
        /// <param name="originCar">Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="destCar">Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="originPark">Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="destPark">Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="interchangeDurationInMinutes">The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="bodSearch">Show BoD-journeys in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse</returns>
        VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse JourneysGet(string? originGid = default(string?), string? originName = default(string?), double? originLatitude = default(double?), double? originLongitude = default(double?), string? destinationGid = default(string?), string? destinationName = default(string?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?), DateTime? dateTime = default(DateTime?), VTApiPlaneraResaCoreModelsDateTimeRelatesToType? dateTimeRelatesTo = default(VTApiPlaneraResaCoreModelsDateTimeRelatesToType?), string? paginationReference = default(string?), int? limit = default(int?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>? transportModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>? transportSubModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>?), bool? onlyDirectConnections = default(bool?), bool? includeNearbyStopAreas = default(bool?), long? viaGid = default(long?), string? originWalk = default(string?), string? destWalk = default(string?), string? originBike = default(string?), string? destBike = default(string?), string? totalBike = default(string?), string? originCar = default(string?), string? destCar = default(string?), string? originPark = default(string?), string? destPark = default(string?), int? interchangeDurationInMinutes = default(int?), bool? includeOccupancy = default(bool?), bool? bodSearch = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Returns journeys matching the specified search parameters.
        /// </summary>
        /// <remarks>
        /// For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.                Sample request:                    GET /journeys?originGid&#x3D;9021014001760000&amp;destinationGid&#x3D;9021014003980000                or                    GET /journeys?originName&#x3D;Sadelsten,+V%C3%A5rg%C3%A5rda&amp;originLongitude&#x3D;12.63308&amp;originLatitude&#x3D;58.028237&amp;destinationLongitude&#x3D;11.930897&amp;destinationLatitude&#x3D;57.586085&amp;destinationName&#x3D;%C3%85sdammsstigen,+427+36+Billdal
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originGid">The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. &#39;9021014001760000&#39;), a stop point (e.g. &#39;9022014001760004&#39;) or meta-station (e.g. &#39;0000000800000022&#39;)). (optional)</param>
        /// <param name="originName">The name of the origin location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="originLatitude">The latitude of the origin location. (optional)</param>
        /// <param name="originLongitude">The longitude of the origin location. (optional)</param>
        /// <param name="destinationGid">The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station). (optional)</param>
        /// <param name="destinationName">The name of the destination location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="destinationLatitude">The latitude of the destination location. (optional)</param>
        /// <param name="destinationLongitude">The longitude of the destination location. (optional)</param>
        /// <param name="dateTime">The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure. (optional)</param>
        /// <param name="dateTimeRelatesTo">Specifies if the datetime is related to the departure or arrival of the journey. (optional)</param>
        /// <param name="paginationReference">Pagination reference from a previous search. (optional)</param>
        /// <param name="limit">The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results. (optional, default to 10)</param>
        /// <param name="transportModes">The transport modes to include when searching for journeys, if none specified all transport modes are included. (optional)</param>
        /// <param name="transportSubModes">The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode &#39;train&#39;. (optional)</param>
        /// <param name="onlyDirectConnections">Only include direct connections, e.g. journeys with one trip leg. (optional, default to false)</param>
        /// <param name="includeNearbyStopAreas">Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area. (optional, default to false)</param>
        /// <param name="viaGid">The 16-digit Västtrafik gid of the via location (which must be a stop area). (optional)</param>
        /// <param name="originWalk">Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="destWalk">Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="originBike">Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="destBike">Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="totalBike">Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike&#x3D;1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters). (optional)</param>
        /// <param name="originCar">Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="destCar">Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="originPark">Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="destPark">Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="interchangeDurationInMinutes">The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="bodSearch">Show BoD-journeys in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse> JourneysGetWithHttpInfo(string? originGid = default(string?), string? originName = default(string?), double? originLatitude = default(double?), double? originLongitude = default(double?), string? destinationGid = default(string?), string? destinationName = default(string?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?), DateTime? dateTime = default(DateTime?), VTApiPlaneraResaCoreModelsDateTimeRelatesToType? dateTimeRelatesTo = default(VTApiPlaneraResaCoreModelsDateTimeRelatesToType?), string? paginationReference = default(string?), int? limit = default(int?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>? transportModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>? transportSubModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>?), bool? onlyDirectConnections = default(bool?), bool? includeNearbyStopAreas = default(bool?), long? viaGid = default(long?), string? originWalk = default(string?), string? destWalk = default(string?), string? originBike = default(string?), string? destBike = default(string?), string? totalBike = default(string?), string? originCar = default(string?), string? destCar = default(string?), string? originPark = default(string?), string? destPark = default(string?), int? interchangeDurationInMinutes = default(int?), bool? includeOccupancy = default(bool?), bool? bodSearch = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Reconstructs a journey based on the given reconstruction reference, received from the search journeys query.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (optional)</param>
        /// <param name="hashedRef">The hashed version of the reconstruction reference. If valid the saved unhashed reconstruction reference will be used. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel</returns>
        VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel JourneysReconstructGet(string? varRef = default(string?), string? hashedRef = default(string?), bool? includeOccupancy = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Reconstructs a journey based on the given reconstruction reference, received from the search journeys query.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (optional)</param>
        /// <param name="hashedRef">The hashed version of the reconstruction reference. If valid the saved unhashed reconstruction reference will be used. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel> JourneysReconstructGetWithHttpInfo(string? varRef = default(string?), string? hashedRef = default(string?), bool? includeOccupancy = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Shortens a reconstruction reference.
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel</returns>
        VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel JourneysReconstructPost(string? varRef = default(string?), int operationIndex = 0);

        /// <summary>
        /// Shortens a reconstruction reference.
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel> JourneysReconstructPostWithHttpInfo(string? varRef = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns a time interval for when journey data is available.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel</returns>
        VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel JourneysValidTimeIntervalGet(int operationIndex = 0);

        /// <summary>
        /// Returns a time interval for when journey data is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel> JourneysValidTimeIntervalGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJourneysApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns details about a journey.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /journeys/{detailsReference}/details?includes&#x3D;ticketsuggestions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="channelIds">List of channel ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="productTypes">List of product type ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="travellerCategories">List of traveller category ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel> JourneysDetailsReferenceDetailsGetAsync(string detailsReference, List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>?), List<int>? channelIds = default(List<int>?), List<int>? productTypes = default(List<int>?), List<VTApiPlaneraResaWebV4ModelsTravellerCategory>? travellerCategories = default(List<VTApiPlaneraResaWebV4ModelsTravellerCategory>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns details about a journey.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /journeys/{detailsReference}/details?includes&#x3D;ticketsuggestions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="channelIds">List of channel ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="productTypes">List of product type ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="travellerCategories">List of traveller category ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel>> JourneysDetailsReferenceDetailsGetWithHttpInfoAsync(string detailsReference, List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>?), List<int>? channelIds = default(List<int>?), List<int>? productTypes = default(List<int>?), List<VTApiPlaneraResaWebV4ModelsTravellerCategory>? travellerCategories = default(List<VTApiPlaneraResaWebV4ModelsTravellerCategory>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns journeys matching the specified search parameters.
        /// </summary>
        /// <remarks>
        /// For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.                Sample request:                    GET /journeys?originGid&#x3D;9021014001760000&amp;destinationGid&#x3D;9021014003980000                or                    GET /journeys?originName&#x3D;Sadelsten,+V%C3%A5rg%C3%A5rda&amp;originLongitude&#x3D;12.63308&amp;originLatitude&#x3D;58.028237&amp;destinationLongitude&#x3D;11.930897&amp;destinationLatitude&#x3D;57.586085&amp;destinationName&#x3D;%C3%85sdammsstigen,+427+36+Billdal
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originGid">The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. &#39;9021014001760000&#39;), a stop point (e.g. &#39;9022014001760004&#39;) or meta-station (e.g. &#39;0000000800000022&#39;)). (optional)</param>
        /// <param name="originName">The name of the origin location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="originLatitude">The latitude of the origin location. (optional)</param>
        /// <param name="originLongitude">The longitude of the origin location. (optional)</param>
        /// <param name="destinationGid">The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station). (optional)</param>
        /// <param name="destinationName">The name of the destination location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="destinationLatitude">The latitude of the destination location. (optional)</param>
        /// <param name="destinationLongitude">The longitude of the destination location. (optional)</param>
        /// <param name="dateTime">The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure. (optional)</param>
        /// <param name="dateTimeRelatesTo">Specifies if the datetime is related to the departure or arrival of the journey. (optional)</param>
        /// <param name="paginationReference">Pagination reference from a previous search. (optional)</param>
        /// <param name="limit">The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results. (optional, default to 10)</param>
        /// <param name="transportModes">The transport modes to include when searching for journeys, if none specified all transport modes are included. (optional)</param>
        /// <param name="transportSubModes">The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode &#39;train&#39;. (optional)</param>
        /// <param name="onlyDirectConnections">Only include direct connections, e.g. journeys with one trip leg. (optional, default to false)</param>
        /// <param name="includeNearbyStopAreas">Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area. (optional, default to false)</param>
        /// <param name="viaGid">The 16-digit Västtrafik gid of the via location (which must be a stop area). (optional)</param>
        /// <param name="originWalk">Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="destWalk">Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="originBike">Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="destBike">Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="totalBike">Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike&#x3D;1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters). (optional)</param>
        /// <param name="originCar">Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="destCar">Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="originPark">Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="destPark">Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="interchangeDurationInMinutes">The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="bodSearch">Show BoD-journeys in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse> JourneysGetAsync(string? originGid = default(string?), string? originName = default(string?), double? originLatitude = default(double?), double? originLongitude = default(double?), string? destinationGid = default(string?), string? destinationName = default(string?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?), DateTime? dateTime = default(DateTime?), VTApiPlaneraResaCoreModelsDateTimeRelatesToType? dateTimeRelatesTo = default(VTApiPlaneraResaCoreModelsDateTimeRelatesToType?), string? paginationReference = default(string?), int? limit = default(int?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>? transportModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>? transportSubModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>?), bool? onlyDirectConnections = default(bool?), bool? includeNearbyStopAreas = default(bool?), long? viaGid = default(long?), string? originWalk = default(string?), string? destWalk = default(string?), string? originBike = default(string?), string? destBike = default(string?), string? totalBike = default(string?), string? originCar = default(string?), string? destCar = default(string?), string? originPark = default(string?), string? destPark = default(string?), int? interchangeDurationInMinutes = default(int?), bool? includeOccupancy = default(bool?), bool? bodSearch = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns journeys matching the specified search parameters.
        /// </summary>
        /// <remarks>
        /// For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.                Sample request:                    GET /journeys?originGid&#x3D;9021014001760000&amp;destinationGid&#x3D;9021014003980000                or                    GET /journeys?originName&#x3D;Sadelsten,+V%C3%A5rg%C3%A5rda&amp;originLongitude&#x3D;12.63308&amp;originLatitude&#x3D;58.028237&amp;destinationLongitude&#x3D;11.930897&amp;destinationLatitude&#x3D;57.586085&amp;destinationName&#x3D;%C3%85sdammsstigen,+427+36+Billdal
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originGid">The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. &#39;9021014001760000&#39;), a stop point (e.g. &#39;9022014001760004&#39;) or meta-station (e.g. &#39;0000000800000022&#39;)). (optional)</param>
        /// <param name="originName">The name of the origin location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="originLatitude">The latitude of the origin location. (optional)</param>
        /// <param name="originLongitude">The longitude of the origin location. (optional)</param>
        /// <param name="destinationGid">The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station). (optional)</param>
        /// <param name="destinationName">The name of the destination location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="destinationLatitude">The latitude of the destination location. (optional)</param>
        /// <param name="destinationLongitude">The longitude of the destination location. (optional)</param>
        /// <param name="dateTime">The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure. (optional)</param>
        /// <param name="dateTimeRelatesTo">Specifies if the datetime is related to the departure or arrival of the journey. (optional)</param>
        /// <param name="paginationReference">Pagination reference from a previous search. (optional)</param>
        /// <param name="limit">The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results. (optional, default to 10)</param>
        /// <param name="transportModes">The transport modes to include when searching for journeys, if none specified all transport modes are included. (optional)</param>
        /// <param name="transportSubModes">The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode &#39;train&#39;. (optional)</param>
        /// <param name="onlyDirectConnections">Only include direct connections, e.g. journeys with one trip leg. (optional, default to false)</param>
        /// <param name="includeNearbyStopAreas">Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area. (optional, default to false)</param>
        /// <param name="viaGid">The 16-digit Västtrafik gid of the via location (which must be a stop area). (optional)</param>
        /// <param name="originWalk">Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="destWalk">Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="originBike">Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="destBike">Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="totalBike">Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike&#x3D;1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters). (optional)</param>
        /// <param name="originCar">Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="destCar">Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="originPark">Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="destPark">Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="interchangeDurationInMinutes">The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="bodSearch">Show BoD-journeys in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse>> JourneysGetWithHttpInfoAsync(string? originGid = default(string?), string? originName = default(string?), double? originLatitude = default(double?), double? originLongitude = default(double?), string? destinationGid = default(string?), string? destinationName = default(string?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?), DateTime? dateTime = default(DateTime?), VTApiPlaneraResaCoreModelsDateTimeRelatesToType? dateTimeRelatesTo = default(VTApiPlaneraResaCoreModelsDateTimeRelatesToType?), string? paginationReference = default(string?), int? limit = default(int?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>? transportModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>? transportSubModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>?), bool? onlyDirectConnections = default(bool?), bool? includeNearbyStopAreas = default(bool?), long? viaGid = default(long?), string? originWalk = default(string?), string? destWalk = default(string?), string? originBike = default(string?), string? destBike = default(string?), string? totalBike = default(string?), string? originCar = default(string?), string? destCar = default(string?), string? originPark = default(string?), string? destPark = default(string?), int? interchangeDurationInMinutes = default(int?), bool? includeOccupancy = default(bool?), bool? bodSearch = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reconstructs a journey based on the given reconstruction reference, received from the search journeys query.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (optional)</param>
        /// <param name="hashedRef">The hashed version of the reconstruction reference. If valid the saved unhashed reconstruction reference will be used. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel> JourneysReconstructGetAsync(string? varRef = default(string?), string? hashedRef = default(string?), bool? includeOccupancy = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reconstructs a journey based on the given reconstruction reference, received from the search journeys query.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (optional)</param>
        /// <param name="hashedRef">The hashed version of the reconstruction reference. If valid the saved unhashed reconstruction reference will be used. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel>> JourneysReconstructGetWithHttpInfoAsync(string? varRef = default(string?), string? hashedRef = default(string?), bool? includeOccupancy = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Shortens a reconstruction reference.
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel> JourneysReconstructPostAsync(string? varRef = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Shortens a reconstruction reference.
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel>> JourneysReconstructPostWithHttpInfoAsync(string? varRef = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a time interval for when journey data is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel> JourneysValidTimeIntervalGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a time interval for when journey data is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel>> JourneysValidTimeIntervalGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJourneysApi : IJourneysApiSync, IJourneysApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JourneysApi : IJourneysApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JourneysApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JourneysApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JourneysApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneysApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JourneysApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns details about a journey. Sample request:                    GET /journeys/{detailsReference}/details?includes&#x3D;ticketsuggestions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="channelIds">List of channel ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="productTypes">List of product type ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="travellerCategories">List of traveller category ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel</returns>
        public VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel JourneysDetailsReferenceDetailsGet(string detailsReference, List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>?), List<int>? channelIds = default(List<int>?), List<int>? productTypes = default(List<int>?), List<VTApiPlaneraResaWebV4ModelsTravellerCategory>? travellerCategories = default(List<VTApiPlaneraResaWebV4ModelsTravellerCategory>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel> localVarResponse = JourneysDetailsReferenceDetailsGetWithHttpInfo(detailsReference, includes, channelIds, productTypes, travellerCategories);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a journey. Sample request:                    GET /journeys/{detailsReference}/details?includes&#x3D;ticketsuggestions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="channelIds">List of channel ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="productTypes">List of product type ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="travellerCategories">List of traveller category ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel> JourneysDetailsReferenceDetailsGetWithHttpInfo(string detailsReference, List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>?), List<int>? channelIds = default(List<int>?), List<int>? productTypes = default(List<int>?), List<VTApiPlaneraResaWebV4ModelsTravellerCategory>? travellerCategories = default(List<VTApiPlaneraResaWebV4ModelsTravellerCategory>?), int operationIndex = 0)
        {
            // verify the required parameter 'detailsReference' is set
            if (detailsReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'detailsReference' when calling JourneysApi->JourneysDetailsReferenceDetailsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("detailsReference", Org.OpenAPITools.Client.ClientUtils.ParameterToString(detailsReference)); // path parameter
            if (includes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "includes", includes));
            }
            if (channelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "channelIds", channelIds));
            }
            if (productTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "productTypes", productTypes));
            }
            if (travellerCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "travellerCategories", travellerCategories));
            }

            localVarRequestOptions.Operation = "JourneysApi.JourneysDetailsReferenceDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel>("/journeys/{detailsReference}/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysDetailsReferenceDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a journey. Sample request:                    GET /journeys/{detailsReference}/details?includes&#x3D;ticketsuggestions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="channelIds">List of channel ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="productTypes">List of product type ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="travellerCategories">List of traveller category ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel> JourneysDetailsReferenceDetailsGetAsync(string detailsReference, List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>?), List<int>? channelIds = default(List<int>?), List<int>? productTypes = default(List<int>?), List<VTApiPlaneraResaWebV4ModelsTravellerCategory>? travellerCategories = default(List<VTApiPlaneraResaWebV4ModelsTravellerCategory>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel> localVarResponse = await JourneysDetailsReferenceDetailsGetWithHttpInfoAsync(detailsReference, includes, channelIds, productTypes, travellerCategories, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a journey. Sample request:                    GET /journeys/{detailsReference}/details?includes&#x3D;ticketsuggestions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detailsReference">The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.</param>
        /// <param name="includes">The additional information to include in the response. (optional)</param>
        /// <param name="channelIds">List of channel ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="productTypes">List of product type ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="travellerCategories">List of traveller category ids to include if &#39;ticketsuggestions&#39; is set in the &#39;includes&#39; parameter. Optional parameter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel>> JourneysDetailsReferenceDetailsGetWithHttpInfoAsync(string detailsReference, List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>? includes = default(List<VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType>?), List<int>? channelIds = default(List<int>?), List<int>? productTypes = default(List<int>?), List<VTApiPlaneraResaWebV4ModelsTravellerCategory>? travellerCategories = default(List<VTApiPlaneraResaWebV4ModelsTravellerCategory>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'detailsReference' is set
            if (detailsReference == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'detailsReference' when calling JourneysApi->JourneysDetailsReferenceDetailsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("detailsReference", Org.OpenAPITools.Client.ClientUtils.ParameterToString(detailsReference)); // path parameter
            if (includes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "includes", includes));
            }
            if (channelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "channelIds", channelIds));
            }
            if (productTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "productTypes", productTypes));
            }
            if (travellerCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "travellerCategories", travellerCategories));
            }

            localVarRequestOptions.Operation = "JourneysApi.JourneysDetailsReferenceDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel>("/journeys/{detailsReference}/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysDetailsReferenceDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns journeys matching the specified search parameters. For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.                Sample request:                    GET /journeys?originGid&#x3D;9021014001760000&amp;destinationGid&#x3D;9021014003980000                or                    GET /journeys?originName&#x3D;Sadelsten,+V%C3%A5rg%C3%A5rda&amp;originLongitude&#x3D;12.63308&amp;originLatitude&#x3D;58.028237&amp;destinationLongitude&#x3D;11.930897&amp;destinationLatitude&#x3D;57.586085&amp;destinationName&#x3D;%C3%85sdammsstigen,+427+36+Billdal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originGid">The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. &#39;9021014001760000&#39;), a stop point (e.g. &#39;9022014001760004&#39;) or meta-station (e.g. &#39;0000000800000022&#39;)). (optional)</param>
        /// <param name="originName">The name of the origin location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="originLatitude">The latitude of the origin location. (optional)</param>
        /// <param name="originLongitude">The longitude of the origin location. (optional)</param>
        /// <param name="destinationGid">The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station). (optional)</param>
        /// <param name="destinationName">The name of the destination location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="destinationLatitude">The latitude of the destination location. (optional)</param>
        /// <param name="destinationLongitude">The longitude of the destination location. (optional)</param>
        /// <param name="dateTime">The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure. (optional)</param>
        /// <param name="dateTimeRelatesTo">Specifies if the datetime is related to the departure or arrival of the journey. (optional)</param>
        /// <param name="paginationReference">Pagination reference from a previous search. (optional)</param>
        /// <param name="limit">The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results. (optional, default to 10)</param>
        /// <param name="transportModes">The transport modes to include when searching for journeys, if none specified all transport modes are included. (optional)</param>
        /// <param name="transportSubModes">The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode &#39;train&#39;. (optional)</param>
        /// <param name="onlyDirectConnections">Only include direct connections, e.g. journeys with one trip leg. (optional, default to false)</param>
        /// <param name="includeNearbyStopAreas">Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area. (optional, default to false)</param>
        /// <param name="viaGid">The 16-digit Västtrafik gid of the via location (which must be a stop area). (optional)</param>
        /// <param name="originWalk">Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="destWalk">Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="originBike">Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="destBike">Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="totalBike">Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike&#x3D;1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters). (optional)</param>
        /// <param name="originCar">Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="destCar">Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="originPark">Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="destPark">Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="interchangeDurationInMinutes">The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="bodSearch">Show BoD-journeys in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse</returns>
        public VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse JourneysGet(string? originGid = default(string?), string? originName = default(string?), double? originLatitude = default(double?), double? originLongitude = default(double?), string? destinationGid = default(string?), string? destinationName = default(string?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?), DateTime? dateTime = default(DateTime?), VTApiPlaneraResaCoreModelsDateTimeRelatesToType? dateTimeRelatesTo = default(VTApiPlaneraResaCoreModelsDateTimeRelatesToType?), string? paginationReference = default(string?), int? limit = default(int?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>? transportModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>? transportSubModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>?), bool? onlyDirectConnections = default(bool?), bool? includeNearbyStopAreas = default(bool?), long? viaGid = default(long?), string? originWalk = default(string?), string? destWalk = default(string?), string? originBike = default(string?), string? destBike = default(string?), string? totalBike = default(string?), string? originCar = default(string?), string? destCar = default(string?), string? originPark = default(string?), string? destPark = default(string?), int? interchangeDurationInMinutes = default(int?), bool? includeOccupancy = default(bool?), bool? bodSearch = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse> localVarResponse = JourneysGetWithHttpInfo(originGid, originName, originLatitude, originLongitude, destinationGid, destinationName, destinationLatitude, destinationLongitude, dateTime, dateTimeRelatesTo, paginationReference, limit, transportModes, transportSubModes, onlyDirectConnections, includeNearbyStopAreas, viaGid, originWalk, destWalk, originBike, destBike, totalBike, originCar, destCar, originPark, destPark, interchangeDurationInMinutes, includeOccupancy, bodSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns journeys matching the specified search parameters. For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.                Sample request:                    GET /journeys?originGid&#x3D;9021014001760000&amp;destinationGid&#x3D;9021014003980000                or                    GET /journeys?originName&#x3D;Sadelsten,+V%C3%A5rg%C3%A5rda&amp;originLongitude&#x3D;12.63308&amp;originLatitude&#x3D;58.028237&amp;destinationLongitude&#x3D;11.930897&amp;destinationLatitude&#x3D;57.586085&amp;destinationName&#x3D;%C3%85sdammsstigen,+427+36+Billdal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originGid">The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. &#39;9021014001760000&#39;), a stop point (e.g. &#39;9022014001760004&#39;) or meta-station (e.g. &#39;0000000800000022&#39;)). (optional)</param>
        /// <param name="originName">The name of the origin location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="originLatitude">The latitude of the origin location. (optional)</param>
        /// <param name="originLongitude">The longitude of the origin location. (optional)</param>
        /// <param name="destinationGid">The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station). (optional)</param>
        /// <param name="destinationName">The name of the destination location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="destinationLatitude">The latitude of the destination location. (optional)</param>
        /// <param name="destinationLongitude">The longitude of the destination location. (optional)</param>
        /// <param name="dateTime">The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure. (optional)</param>
        /// <param name="dateTimeRelatesTo">Specifies if the datetime is related to the departure or arrival of the journey. (optional)</param>
        /// <param name="paginationReference">Pagination reference from a previous search. (optional)</param>
        /// <param name="limit">The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results. (optional, default to 10)</param>
        /// <param name="transportModes">The transport modes to include when searching for journeys, if none specified all transport modes are included. (optional)</param>
        /// <param name="transportSubModes">The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode &#39;train&#39;. (optional)</param>
        /// <param name="onlyDirectConnections">Only include direct connections, e.g. journeys with one trip leg. (optional, default to false)</param>
        /// <param name="includeNearbyStopAreas">Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area. (optional, default to false)</param>
        /// <param name="viaGid">The 16-digit Västtrafik gid of the via location (which must be a stop area). (optional)</param>
        /// <param name="originWalk">Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="destWalk">Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="originBike">Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="destBike">Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="totalBike">Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike&#x3D;1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters). (optional)</param>
        /// <param name="originCar">Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="destCar">Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="originPark">Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="destPark">Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="interchangeDurationInMinutes">The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="bodSearch">Show BoD-journeys in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse> JourneysGetWithHttpInfo(string? originGid = default(string?), string? originName = default(string?), double? originLatitude = default(double?), double? originLongitude = default(double?), string? destinationGid = default(string?), string? destinationName = default(string?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?), DateTime? dateTime = default(DateTime?), VTApiPlaneraResaCoreModelsDateTimeRelatesToType? dateTimeRelatesTo = default(VTApiPlaneraResaCoreModelsDateTimeRelatesToType?), string? paginationReference = default(string?), int? limit = default(int?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>? transportModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>? transportSubModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>?), bool? onlyDirectConnections = default(bool?), bool? includeNearbyStopAreas = default(bool?), long? viaGid = default(long?), string? originWalk = default(string?), string? destWalk = default(string?), string? originBike = default(string?), string? destBike = default(string?), string? totalBike = default(string?), string? originCar = default(string?), string? destCar = default(string?), string? originPark = default(string?), string? destPark = default(string?), int? interchangeDurationInMinutes = default(int?), bool? includeOccupancy = default(bool?), bool? bodSearch = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (originGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originGid", originGid));
            }
            if (originName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originName", originName));
            }
            if (originLatitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originLatitude", originLatitude));
            }
            if (originLongitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originLongitude", originLongitude));
            }
            if (destinationGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destinationGid", destinationGid));
            }
            if (destinationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destinationName", destinationName));
            }
            if (destinationLatitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destinationLatitude", destinationLatitude));
            }
            if (destinationLongitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destinationLongitude", destinationLongitude));
            }
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }
            if (dateTimeRelatesTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateTimeRelatesTo", dateTimeRelatesTo));
            }
            if (paginationReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paginationReference", paginationReference));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (transportModes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "transportModes", transportModes));
            }
            if (transportSubModes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "transportSubModes", transportSubModes));
            }
            if (onlyDirectConnections != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyDirectConnections", onlyDirectConnections));
            }
            if (includeNearbyStopAreas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeNearbyStopAreas", includeNearbyStopAreas));
            }
            if (viaGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "viaGid", viaGid));
            }
            if (originWalk != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originWalk", originWalk));
            }
            if (destWalk != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destWalk", destWalk));
            }
            if (originBike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originBike", originBike));
            }
            if (destBike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destBike", destBike));
            }
            if (totalBike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "totalBike", totalBike));
            }
            if (originCar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originCar", originCar));
            }
            if (destCar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destCar", destCar));
            }
            if (originPark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originPark", originPark));
            }
            if (destPark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destPark", destPark));
            }
            if (interchangeDurationInMinutes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "interchangeDurationInMinutes", interchangeDurationInMinutes));
            }
            if (includeOccupancy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeOccupancy", includeOccupancy));
            }
            if (bodSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bodSearch", bodSearch));
            }

            localVarRequestOptions.Operation = "JourneysApi.JourneysGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse>("/journeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns journeys matching the specified search parameters. For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.                Sample request:                    GET /journeys?originGid&#x3D;9021014001760000&amp;destinationGid&#x3D;9021014003980000                or                    GET /journeys?originName&#x3D;Sadelsten,+V%C3%A5rg%C3%A5rda&amp;originLongitude&#x3D;12.63308&amp;originLatitude&#x3D;58.028237&amp;destinationLongitude&#x3D;11.930897&amp;destinationLatitude&#x3D;57.586085&amp;destinationName&#x3D;%C3%85sdammsstigen,+427+36+Billdal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originGid">The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. &#39;9021014001760000&#39;), a stop point (e.g. &#39;9022014001760004&#39;) or meta-station (e.g. &#39;0000000800000022&#39;)). (optional)</param>
        /// <param name="originName">The name of the origin location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="originLatitude">The latitude of the origin location. (optional)</param>
        /// <param name="originLongitude">The longitude of the origin location. (optional)</param>
        /// <param name="destinationGid">The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station). (optional)</param>
        /// <param name="destinationName">The name of the destination location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="destinationLatitude">The latitude of the destination location. (optional)</param>
        /// <param name="destinationLongitude">The longitude of the destination location. (optional)</param>
        /// <param name="dateTime">The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure. (optional)</param>
        /// <param name="dateTimeRelatesTo">Specifies if the datetime is related to the departure or arrival of the journey. (optional)</param>
        /// <param name="paginationReference">Pagination reference from a previous search. (optional)</param>
        /// <param name="limit">The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results. (optional, default to 10)</param>
        /// <param name="transportModes">The transport modes to include when searching for journeys, if none specified all transport modes are included. (optional)</param>
        /// <param name="transportSubModes">The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode &#39;train&#39;. (optional)</param>
        /// <param name="onlyDirectConnections">Only include direct connections, e.g. journeys with one trip leg. (optional, default to false)</param>
        /// <param name="includeNearbyStopAreas">Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area. (optional, default to false)</param>
        /// <param name="viaGid">The 16-digit Västtrafik gid of the via location (which must be a stop area). (optional)</param>
        /// <param name="originWalk">Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="destWalk">Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="originBike">Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="destBike">Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="totalBike">Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike&#x3D;1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters). (optional)</param>
        /// <param name="originCar">Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="destCar">Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="originPark">Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="destPark">Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="interchangeDurationInMinutes">The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="bodSearch">Show BoD-journeys in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse> JourneysGetAsync(string? originGid = default(string?), string? originName = default(string?), double? originLatitude = default(double?), double? originLongitude = default(double?), string? destinationGid = default(string?), string? destinationName = default(string?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?), DateTime? dateTime = default(DateTime?), VTApiPlaneraResaCoreModelsDateTimeRelatesToType? dateTimeRelatesTo = default(VTApiPlaneraResaCoreModelsDateTimeRelatesToType?), string? paginationReference = default(string?), int? limit = default(int?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>? transportModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>? transportSubModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>?), bool? onlyDirectConnections = default(bool?), bool? includeNearbyStopAreas = default(bool?), long? viaGid = default(long?), string? originWalk = default(string?), string? destWalk = default(string?), string? originBike = default(string?), string? destBike = default(string?), string? totalBike = default(string?), string? originCar = default(string?), string? destCar = default(string?), string? originPark = default(string?), string? destPark = default(string?), int? interchangeDurationInMinutes = default(int?), bool? includeOccupancy = default(bool?), bool? bodSearch = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse> localVarResponse = await JourneysGetWithHttpInfoAsync(originGid, originName, originLatitude, originLongitude, destinationGid, destinationName, destinationLatitude, destinationLongitude, dateTime, dateTimeRelatesTo, paginationReference, limit, transportModes, transportSubModes, onlyDirectConnections, includeNearbyStopAreas, viaGid, originWalk, destWalk, originBike, destBike, totalBike, originCar, destCar, originPark, destPark, interchangeDurationInMinutes, includeOccupancy, bodSearch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns journeys matching the specified search parameters. For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.                Sample request:                    GET /journeys?originGid&#x3D;9021014001760000&amp;destinationGid&#x3D;9021014003980000                or                    GET /journeys?originName&#x3D;Sadelsten,+V%C3%A5rg%C3%A5rda&amp;originLongitude&#x3D;12.63308&amp;originLatitude&#x3D;58.028237&amp;destinationLongitude&#x3D;11.930897&amp;destinationLatitude&#x3D;57.586085&amp;destinationName&#x3D;%C3%85sdammsstigen,+427+36+Billdal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originGid">The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. &#39;9021014001760000&#39;), a stop point (e.g. &#39;9022014001760004&#39;) or meta-station (e.g. &#39;0000000800000022&#39;)). (optional)</param>
        /// <param name="originName">The name of the origin location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="originLatitude">The latitude of the origin location. (optional)</param>
        /// <param name="originLongitude">The longitude of the origin location. (optional)</param>
        /// <param name="destinationGid">The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station). (optional)</param>
        /// <param name="destinationName">The name of the destination location. The maximum length allowed is 256 characters. (optional)</param>
        /// <param name="destinationLatitude">The latitude of the destination location. (optional)</param>
        /// <param name="destinationLongitude">The longitude of the destination location. (optional)</param>
        /// <param name="dateTime">The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure. (optional)</param>
        /// <param name="dateTimeRelatesTo">Specifies if the datetime is related to the departure or arrival of the journey. (optional)</param>
        /// <param name="paginationReference">Pagination reference from a previous search. (optional)</param>
        /// <param name="limit">The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results. (optional, default to 10)</param>
        /// <param name="transportModes">The transport modes to include when searching for journeys, if none specified all transport modes are included. (optional)</param>
        /// <param name="transportSubModes">The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode &#39;train&#39;. (optional)</param>
        /// <param name="onlyDirectConnections">Only include direct connections, e.g. journeys with one trip leg. (optional, default to false)</param>
        /// <param name="includeNearbyStopAreas">Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area. (optional, default to false)</param>
        /// <param name="viaGid">The 16-digit Västtrafik gid of the via location (which must be a stop area). (optional)</param>
        /// <param name="originWalk">Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="destWalk">Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk&#x3D;1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters). (optional)</param>
        /// <param name="originBike">Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="destBike">Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike&#x3D;1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters). (optional)</param>
        /// <param name="totalBike">Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike&#x3D;1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters). (optional)</param>
        /// <param name="originCar">Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="destCar">Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar&#x3D;1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters). (optional)</param>
        /// <param name="originPark">Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="destPark">Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark&#x3D;1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters). (optional)</param>
        /// <param name="interchangeDurationInMinutes">The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="bodSearch">Show BoD-journeys in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse>> JourneysGetWithHttpInfoAsync(string? originGid = default(string?), string? originName = default(string?), double? originLatitude = default(double?), double? originLongitude = default(double?), string? destinationGid = default(string?), string? destinationName = default(string?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?), DateTime? dateTime = default(DateTime?), VTApiPlaneraResaCoreModelsDateTimeRelatesToType? dateTimeRelatesTo = default(VTApiPlaneraResaCoreModelsDateTimeRelatesToType?), string? paginationReference = default(string?), int? limit = default(int?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>? transportModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportMode>?), List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>? transportSubModes = default(List<VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode>?), bool? onlyDirectConnections = default(bool?), bool? includeNearbyStopAreas = default(bool?), long? viaGid = default(long?), string? originWalk = default(string?), string? destWalk = default(string?), string? originBike = default(string?), string? destBike = default(string?), string? totalBike = default(string?), string? originCar = default(string?), string? destCar = default(string?), string? originPark = default(string?), string? destPark = default(string?), int? interchangeDurationInMinutes = default(int?), bool? includeOccupancy = default(bool?), bool? bodSearch = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (originGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originGid", originGid));
            }
            if (originName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originName", originName));
            }
            if (originLatitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originLatitude", originLatitude));
            }
            if (originLongitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originLongitude", originLongitude));
            }
            if (destinationGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destinationGid", destinationGid));
            }
            if (destinationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destinationName", destinationName));
            }
            if (destinationLatitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destinationLatitude", destinationLatitude));
            }
            if (destinationLongitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destinationLongitude", destinationLongitude));
            }
            if (dateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateTime", dateTime));
            }
            if (dateTimeRelatesTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateTimeRelatesTo", dateTimeRelatesTo));
            }
            if (paginationReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paginationReference", paginationReference));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (transportModes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "transportModes", transportModes));
            }
            if (transportSubModes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "transportSubModes", transportSubModes));
            }
            if (onlyDirectConnections != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "onlyDirectConnections", onlyDirectConnections));
            }
            if (includeNearbyStopAreas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeNearbyStopAreas", includeNearbyStopAreas));
            }
            if (viaGid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "viaGid", viaGid));
            }
            if (originWalk != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originWalk", originWalk));
            }
            if (destWalk != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destWalk", destWalk));
            }
            if (originBike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originBike", originBike));
            }
            if (destBike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destBike", destBike));
            }
            if (totalBike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "totalBike", totalBike));
            }
            if (originCar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originCar", originCar));
            }
            if (destCar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destCar", destCar));
            }
            if (originPark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "originPark", originPark));
            }
            if (destPark != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "destPark", destPark));
            }
            if (interchangeDurationInMinutes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "interchangeDurationInMinutes", interchangeDurationInMinutes));
            }
            if (includeOccupancy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeOccupancy", includeOccupancy));
            }
            if (bodSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bodSearch", bodSearch));
            }

            localVarRequestOptions.Operation = "JourneysApi.JourneysGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse>("/journeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reconstructs a journey based on the given reconstruction reference, received from the search journeys query. Sample request:                    GET /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (optional)</param>
        /// <param name="hashedRef">The hashed version of the reconstruction reference. If valid the saved unhashed reconstruction reference will be used. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel</returns>
        public VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel JourneysReconstructGet(string? varRef = default(string?), string? hashedRef = default(string?), bool? includeOccupancy = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel> localVarResponse = JourneysReconstructGetWithHttpInfo(varRef, hashedRef, includeOccupancy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reconstructs a journey based on the given reconstruction reference, received from the search journeys query. Sample request:                    GET /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (optional)</param>
        /// <param name="hashedRef">The hashed version of the reconstruction reference. If valid the saved unhashed reconstruction reference will be used. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel> JourneysReconstructGetWithHttpInfo(string? varRef = default(string?), string? hashedRef = default(string?), bool? includeOccupancy = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ref", varRef));
            }
            if (hashedRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hashedRef", hashedRef));
            }
            if (includeOccupancy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeOccupancy", includeOccupancy));
            }

            localVarRequestOptions.Operation = "JourneysApi.JourneysReconstructGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel>("/journeys/reconstruct", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysReconstructGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reconstructs a journey based on the given reconstruction reference, received from the search journeys query. Sample request:                    GET /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (optional)</param>
        /// <param name="hashedRef">The hashed version of the reconstruction reference. If valid the saved unhashed reconstruction reference will be used. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel> JourneysReconstructGetAsync(string? varRef = default(string?), string? hashedRef = default(string?), bool? includeOccupancy = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel> localVarResponse = await JourneysReconstructGetWithHttpInfoAsync(varRef, hashedRef, includeOccupancy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reconstructs a journey based on the given reconstruction reference, received from the search journeys query. Sample request:                    GET /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (optional)</param>
        /// <param name="hashedRef">The hashed version of the reconstruction reference. If valid the saved unhashed reconstruction reference will be used. (optional)</param>
        /// <param name="includeOccupancy">Includes occupancy in journey. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel>> JourneysReconstructGetWithHttpInfoAsync(string? varRef = default(string?), string? hashedRef = default(string?), bool? includeOccupancy = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ref", varRef));
            }
            if (hashedRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hashedRef", hashedRef));
            }
            if (includeOccupancy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeOccupancy", includeOccupancy));
            }

            localVarRequestOptions.Operation = "JourneysApi.JourneysReconstructGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel>("/journeys/reconstruct", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysReconstructGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shortens a reconstruction reference. Sample request:                    POST /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel</returns>
        public VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel JourneysReconstructPost(string? varRef = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel> localVarResponse = JourneysReconstructPostWithHttpInfo(varRef);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shortens a reconstruction reference. Sample request:                    POST /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel> JourneysReconstructPostWithHttpInfo(string? varRef = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ref", varRef));
            }

            localVarRequestOptions.Operation = "JourneysApi.JourneysReconstructPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel>("/journeys/reconstruct", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysReconstructPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shortens a reconstruction reference. Sample request:                    POST /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel> JourneysReconstructPostAsync(string? varRef = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel> localVarResponse = await JourneysReconstructPostWithHttpInfoAsync(varRef, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shortens a reconstruction reference. Sample request:                    POST /journeys/reconstruct?ref&#x3D;¶HKI¶T$A&#x3D;1@O&#x3D;Brunnsparken, Göteborg@L&#x3D;1760003@a&#x3D;128@$A&#x3D;1@O&#x3D;Korsvägen, Göteborg@L&#x3D;3980004@a&#x3D;128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varRef">The reconstruction reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel>> JourneysReconstructPostWithHttpInfoAsync(string? varRef = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (varRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ref", varRef));
            }

            localVarRequestOptions.Operation = "JourneysApi.JourneysReconstructPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VTApiPlaneraResaWebV4ModelsJourneysShortenedReconstructionRefApiModel>("/journeys/reconstruct", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysReconstructPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a time interval for when journey data is available. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel</returns>
        public VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel JourneysValidTimeIntervalGet(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel> localVarResponse = JourneysValidTimeIntervalGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a time interval for when journey data is available. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel> JourneysValidTimeIntervalGetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "JourneysApi.JourneysValidTimeIntervalGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel>("/journeys/valid-time-interval", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysValidTimeIntervalGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a time interval for when journey data is available. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel> JourneysValidTimeIntervalGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel> localVarResponse = await JourneysValidTimeIntervalGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a time interval for when journey data is available. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel>> JourneysValidTimeIntervalGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "JourneysApi.JourneysValidTimeIntervalGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel>("/journeys/valid-time-interval", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JourneysValidTimeIntervalGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
