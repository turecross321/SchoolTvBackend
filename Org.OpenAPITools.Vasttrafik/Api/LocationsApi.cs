/*
 * Planera Resa
 *
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /locations/by-coordinates?latitude&#x3D;57.708734&amp;longitude&#x3D;11.974764&amp;radiusInMeters&#x3D;500&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">The latitude.</param>
        /// <param name="longitude">The longitude.</param>
        /// <param name="radiusInMeters">The search radius from the coordinates specified in meters. Must be a positive integer &gt; 0. (optional, default to 500)</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse LocationsByCoordinatesGet(double latitude, double longitude, int? radiusInMeters = default(int?), List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /locations/by-coordinates?latitude&#x3D;57.708734&amp;longitude&#x3D;11.974764&amp;radiusInMeters&#x3D;500&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">The latitude.</param>
        /// <param name="longitude">The longitude.</param>
        /// <param name="radiusInMeters">The search radius from the coordinates specified in meters. Must be a positive integer &gt; 0. (optional, default to 500)</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> LocationsByCoordinatesGetWithHttpInfo(double latitude, double longitude, int? radiusInMeters = default(int?), List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /locations/by-text?q&#x3D;brunnsparken&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search text (e.g. &#39;brunn&#39;, &#39;cent&#39; or &#39;Kungsgatan&#39;). The maximum length allowed is 256 characters.</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="latitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="longitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse LocationsByTextGet(string q, List<VTApiPlaneraResaWebV4ModelsLocationByTextType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByTextType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), double? latitude = default(double?), double? longitude = default(double?), int operationIndex = 0);

        /// <summary>
        /// Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /locations/by-text?q&#x3D;brunnsparken&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search text (e.g. &#39;brunn&#39;, &#39;cent&#39; or &#39;Kungsgatan&#39;). The maximum length allowed is 256 characters.</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="latitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="longitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> LocationsByTextGetWithHttpInfo(string q, List<VTApiPlaneraResaWebV4ModelsLocationByTextType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByTextType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), double? latitude = default(double?), double? longitude = default(double?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /locations/by-coordinates?latitude&#x3D;57.708734&amp;longitude&#x3D;11.974764&amp;radiusInMeters&#x3D;500&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">The latitude.</param>
        /// <param name="longitude">The longitude.</param>
        /// <param name="radiusInMeters">The search radius from the coordinates specified in meters. Must be a positive integer &gt; 0. (optional, default to 500)</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> LocationsByCoordinatesGetAsync(double latitude, double longitude, int? radiusInMeters = default(int?), List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /locations/by-coordinates?latitude&#x3D;57.708734&amp;longitude&#x3D;11.974764&amp;radiusInMeters&#x3D;500&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">The latitude.</param>
        /// <param name="longitude">The longitude.</param>
        /// <param name="radiusInMeters">The search radius from the coordinates specified in meters. Must be a positive integer &gt; 0. (optional, default to 500)</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>> LocationsByCoordinatesGetWithHttpInfoAsync(double latitude, double longitude, int? radiusInMeters = default(int?), List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /locations/by-text?q&#x3D;brunnsparken&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search text (e.g. &#39;brunn&#39;, &#39;cent&#39; or &#39;Kungsgatan&#39;). The maximum length allowed is 256 characters.</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="latitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="longitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> LocationsByTextGetAsync(string q, List<VTApiPlaneraResaWebV4ModelsLocationByTextType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByTextType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), double? latitude = default(double?), double? longitude = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /locations/by-text?q&#x3D;brunnsparken&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search text (e.g. &#39;brunn&#39;, &#39;cent&#39; or &#39;Kungsgatan&#39;). The maximum length allowed is 256 characters.</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="latitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="longitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>> LocationsByTextGetWithHttpInfoAsync(string q, List<VTApiPlaneraResaWebV4ModelsLocationByTextType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByTextType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), double? latitude = default(double?), double? longitude = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApi : ILocationsApiSync, ILocationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocationsApi : ILocationsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocationsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LocationsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported. Sample request:                    GET /locations/by-coordinates?latitude&#x3D;57.708734&amp;longitude&#x3D;11.974764&amp;radiusInMeters&#x3D;500&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">The latitude.</param>
        /// <param name="longitude">The longitude.</param>
        /// <param name="radiusInMeters">The search radius from the coordinates specified in meters. Must be a positive integer &gt; 0. (optional, default to 500)</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        public VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse LocationsByCoordinatesGet(double latitude, double longitude, int? radiusInMeters = default(int?), List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> localVarResponse = LocationsByCoordinatesGetWithHttpInfo(latitude, longitude, radiusInMeters, types, limit, offset, bodSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported. Sample request:                    GET /locations/by-coordinates?latitude&#x3D;57.708734&amp;longitude&#x3D;11.974764&amp;radiusInMeters&#x3D;500&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">The latitude.</param>
        /// <param name="longitude">The longitude.</param>
        /// <param name="radiusInMeters">The search radius from the coordinates specified in meters. Must be a positive integer &gt; 0. (optional, default to 500)</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> LocationsByCoordinatesGetWithHttpInfo(double latitude, double longitude, int? radiusInMeters = default(int?), List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            if (radiusInMeters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "radiusInMeters", radiusInMeters));
            }
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "types", types));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (bodSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bodSearch", bodSearch));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationsByCoordinatesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>("/locations/by-coordinates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsByCoordinatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported. Sample request:                    GET /locations/by-coordinates?latitude&#x3D;57.708734&amp;longitude&#x3D;11.974764&amp;radiusInMeters&#x3D;500&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">The latitude.</param>
        /// <param name="longitude">The longitude.</param>
        /// <param name="radiusInMeters">The search radius from the coordinates specified in meters. Must be a positive integer &gt; 0. (optional, default to 500)</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> LocationsByCoordinatesGetAsync(double latitude, double longitude, int? radiusInMeters = default(int?), List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> localVarResponse = await LocationsByCoordinatesGetWithHttpInfoAsync(latitude, longitude, radiusInMeters, types, limit, offset, bodSearch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported. Sample request:                    GET /locations/by-coordinates?latitude&#x3D;57.708734&amp;longitude&#x3D;11.974764&amp;radiusInMeters&#x3D;500&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">The latitude.</param>
        /// <param name="longitude">The longitude.</param>
        /// <param name="radiusInMeters">The search radius from the coordinates specified in meters. Must be a positive integer &gt; 0. (optional, default to 500)</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>> LocationsByCoordinatesGetWithHttpInfoAsync(double latitude, double longitude, int? radiusInMeters = default(int?), List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            if (radiusInMeters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "radiusInMeters", radiusInMeters));
            }
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "types", types));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (bodSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bodSearch", bodSearch));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationsByCoordinatesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>("/locations/by-coordinates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsByCoordinatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported. Sample request:                    GET /locations/by-text?q&#x3D;brunnsparken&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search text (e.g. &#39;brunn&#39;, &#39;cent&#39; or &#39;Kungsgatan&#39;). The maximum length allowed is 256 characters.</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="latitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="longitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        public VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse LocationsByTextGet(string q, List<VTApiPlaneraResaWebV4ModelsLocationByTextType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByTextType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), double? latitude = default(double?), double? longitude = default(double?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> localVarResponse = LocationsByTextGetWithHttpInfo(q, types, limit, offset, bodSearch, latitude, longitude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported. Sample request:                    GET /locations/by-text?q&#x3D;brunnsparken&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search text (e.g. &#39;brunn&#39;, &#39;cent&#39; or &#39;Kungsgatan&#39;). The maximum length allowed is 256 characters.</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="latitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="longitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> LocationsByTextGetWithHttpInfo(string q, List<VTApiPlaneraResaWebV4ModelsLocationByTextType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByTextType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), double? latitude = default(double?), double? longitude = default(double?), int operationIndex = 0)
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'q' when calling LocationsApi->LocationsByTextGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "types", types));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (bodSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bodSearch", bodSearch));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationsByTextGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>("/locations/by-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsByTextGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported. Sample request:                    GET /locations/by-text?q&#x3D;brunnsparken&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search text (e.g. &#39;brunn&#39;, &#39;cent&#39; or &#39;Kungsgatan&#39;). The maximum length allowed is 256 characters.</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="latitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="longitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse</returns>
        public async System.Threading.Tasks.Task<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> LocationsByTextGetAsync(string q, List<VTApiPlaneraResaWebV4ModelsLocationByTextType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByTextType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), double? latitude = default(double?), double? longitude = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> localVarResponse = await LocationsByTextGetWithHttpInfoAsync(q, types, limit, offset, bodSearch, latitude, longitude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported. Sample request:                    GET /locations/by-text?q&#x3D;brunnsparken&amp;limit&#x3D;10&amp;offset&#x3D;0
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Vasttrafik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search text (e.g. &#39;brunn&#39;, &#39;cent&#39; or &#39;Kungsgatan&#39;). The maximum length allowed is 256 characters.</param>
        /// <param name="types">The location types to include in the response, if none specified all locations types are included. (optional)</param>
        /// <param name="limit">The number of results to return. (optional, default to 10)</param>
        /// <param name="offset">The zero-based start offset of the pagination. (optional, default to 0)</param>
        /// <param name="bodSearch">Show BoD stops in result (optional, default to false)</param>
        /// <param name="latitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="longitude">Search coordinate. Gives priority to geographically closer results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>> LocationsByTextGetWithHttpInfoAsync(string q, List<VTApiPlaneraResaWebV4ModelsLocationByTextType>? types = default(List<VTApiPlaneraResaWebV4ModelsLocationByTextType>?), int? limit = default(int?), int? offset = default(int?), bool? bodSearch = default(bool?), double? latitude = default(double?), double? longitude = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'q' when calling LocationsApi->LocationsByTextGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "types", types));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (bodSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bodSearch", bodSearch));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }

            localVarRequestOptions.Operation = "LocationsApi.LocationsByTextGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>("/locations/by-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationsByTextGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
